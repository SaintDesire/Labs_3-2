
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model AUDITORIUM
 * 
 */
export type AUDITORIUM = $Result.DefaultSelection<Prisma.$AUDITORIUMPayload>
/**
 * Model AUDITORIUM_TYPE
 * 
 */
export type AUDITORIUM_TYPE = $Result.DefaultSelection<Prisma.$AUDITORIUM_TYPEPayload>
/**
 * Model FACULTY
 * 
 */
export type FACULTY = $Result.DefaultSelection<Prisma.$FACULTYPayload>
/**
 * Model PULPIT
 * 
 */
export type PULPIT = $Result.DefaultSelection<Prisma.$PULPITPayload>
/**
 * Model SUBJECT
 * 
 */
export type SUBJECT = $Result.DefaultSelection<Prisma.$SUBJECTPayload>
/**
 * Model TEACHER
 * 
 */
export type TEACHER = $Result.DefaultSelection<Prisma.$TEACHERPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more AUDITORIUMS
 * const aUDITORIUMS = await prisma.aUDITORIUM.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more AUDITORIUMS
   * const aUDITORIUMS = await prisma.aUDITORIUM.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.aUDITORIUM`: Exposes CRUD operations for the **AUDITORIUM** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AUDITORIUMS
    * const aUDITORIUMS = await prisma.aUDITORIUM.findMany()
    * ```
    */
  get aUDITORIUM(): Prisma.AUDITORIUMDelegate<ExtArgs>;

  /**
   * `prisma.aUDITORIUM_TYPE`: Exposes CRUD operations for the **AUDITORIUM_TYPE** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AUDITORIUM_TYPES
    * const aUDITORIUM_TYPES = await prisma.aUDITORIUM_TYPE.findMany()
    * ```
    */
  get aUDITORIUM_TYPE(): Prisma.AUDITORIUM_TYPEDelegate<ExtArgs>;

  /**
   * `prisma.fACULTY`: Exposes CRUD operations for the **FACULTY** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FACULTIES
    * const fACULTIES = await prisma.fACULTY.findMany()
    * ```
    */
  get fACULTY(): Prisma.FACULTYDelegate<ExtArgs>;

  /**
   * `prisma.pULPIT`: Exposes CRUD operations for the **PULPIT** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PULPITS
    * const pULPITS = await prisma.pULPIT.findMany()
    * ```
    */
  get pULPIT(): Prisma.PULPITDelegate<ExtArgs>;

  /**
   * `prisma.sUBJECT`: Exposes CRUD operations for the **SUBJECT** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SUBJECTS
    * const sUBJECTS = await prisma.sUBJECT.findMany()
    * ```
    */
  get sUBJECT(): Prisma.SUBJECTDelegate<ExtArgs>;

  /**
   * `prisma.tEACHER`: Exposes CRUD operations for the **TEACHER** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TEACHERS
    * const tEACHERS = await prisma.tEACHER.findMany()
    * ```
    */
  get tEACHER(): Prisma.TEACHERDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.10.2
   * Query Engine version: 5a9203d0590c951969e85a7d07215503f4672eb9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    AUDITORIUM: 'AUDITORIUM',
    AUDITORIUM_TYPE: 'AUDITORIUM_TYPE',
    FACULTY: 'FACULTY',
    PULPIT: 'PULPIT',
    SUBJECT: 'SUBJECT',
    TEACHER: 'TEACHER'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'aUDITORIUM' | 'aUDITORIUM_TYPE' | 'fACULTY' | 'pULPIT' | 'sUBJECT' | 'tEACHER'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      AUDITORIUM: {
        payload: Prisma.$AUDITORIUMPayload<ExtArgs>
        fields: Prisma.AUDITORIUMFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AUDITORIUMFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AUDITORIUMPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AUDITORIUMFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AUDITORIUMPayload>
          }
          findFirst: {
            args: Prisma.AUDITORIUMFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AUDITORIUMPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AUDITORIUMFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AUDITORIUMPayload>
          }
          findMany: {
            args: Prisma.AUDITORIUMFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AUDITORIUMPayload>[]
          }
          create: {
            args: Prisma.AUDITORIUMCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AUDITORIUMPayload>
          }
          createMany: {
            args: Prisma.AUDITORIUMCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AUDITORIUMDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AUDITORIUMPayload>
          }
          update: {
            args: Prisma.AUDITORIUMUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AUDITORIUMPayload>
          }
          deleteMany: {
            args: Prisma.AUDITORIUMDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AUDITORIUMUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AUDITORIUMUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AUDITORIUMPayload>
          }
          aggregate: {
            args: Prisma.AUDITORIUMAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAUDITORIUM>
          }
          groupBy: {
            args: Prisma.AUDITORIUMGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AUDITORIUMGroupByOutputType>[]
          }
          count: {
            args: Prisma.AUDITORIUMCountArgs<ExtArgs>,
            result: $Utils.Optional<AUDITORIUMCountAggregateOutputType> | number
          }
        }
      }
      AUDITORIUM_TYPE: {
        payload: Prisma.$AUDITORIUM_TYPEPayload<ExtArgs>
        fields: Prisma.AUDITORIUM_TYPEFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AUDITORIUM_TYPEFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AUDITORIUM_TYPEPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AUDITORIUM_TYPEFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AUDITORIUM_TYPEPayload>
          }
          findFirst: {
            args: Prisma.AUDITORIUM_TYPEFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AUDITORIUM_TYPEPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AUDITORIUM_TYPEFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AUDITORIUM_TYPEPayload>
          }
          findMany: {
            args: Prisma.AUDITORIUM_TYPEFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AUDITORIUM_TYPEPayload>[]
          }
          create: {
            args: Prisma.AUDITORIUM_TYPECreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AUDITORIUM_TYPEPayload>
          }
          createMany: {
            args: Prisma.AUDITORIUM_TYPECreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AUDITORIUM_TYPEDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AUDITORIUM_TYPEPayload>
          }
          update: {
            args: Prisma.AUDITORIUM_TYPEUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AUDITORIUM_TYPEPayload>
          }
          deleteMany: {
            args: Prisma.AUDITORIUM_TYPEDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AUDITORIUM_TYPEUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AUDITORIUM_TYPEUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AUDITORIUM_TYPEPayload>
          }
          aggregate: {
            args: Prisma.AUDITORIUM_TYPEAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAUDITORIUM_TYPE>
          }
          groupBy: {
            args: Prisma.AUDITORIUM_TYPEGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AUDITORIUM_TYPEGroupByOutputType>[]
          }
          count: {
            args: Prisma.AUDITORIUM_TYPECountArgs<ExtArgs>,
            result: $Utils.Optional<AUDITORIUM_TYPECountAggregateOutputType> | number
          }
        }
      }
      FACULTY: {
        payload: Prisma.$FACULTYPayload<ExtArgs>
        fields: Prisma.FACULTYFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FACULTYFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FACULTYPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FACULTYFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FACULTYPayload>
          }
          findFirst: {
            args: Prisma.FACULTYFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FACULTYPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FACULTYFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FACULTYPayload>
          }
          findMany: {
            args: Prisma.FACULTYFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FACULTYPayload>[]
          }
          create: {
            args: Prisma.FACULTYCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FACULTYPayload>
          }
          createMany: {
            args: Prisma.FACULTYCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FACULTYDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FACULTYPayload>
          }
          update: {
            args: Prisma.FACULTYUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FACULTYPayload>
          }
          deleteMany: {
            args: Prisma.FACULTYDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FACULTYUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FACULTYUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FACULTYPayload>
          }
          aggregate: {
            args: Prisma.FACULTYAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFACULTY>
          }
          groupBy: {
            args: Prisma.FACULTYGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FACULTYGroupByOutputType>[]
          }
          count: {
            args: Prisma.FACULTYCountArgs<ExtArgs>,
            result: $Utils.Optional<FACULTYCountAggregateOutputType> | number
          }
        }
      }
      PULPIT: {
        payload: Prisma.$PULPITPayload<ExtArgs>
        fields: Prisma.PULPITFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PULPITFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PULPITPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PULPITFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PULPITPayload>
          }
          findFirst: {
            args: Prisma.PULPITFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PULPITPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PULPITFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PULPITPayload>
          }
          findMany: {
            args: Prisma.PULPITFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PULPITPayload>[]
          }
          create: {
            args: Prisma.PULPITCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PULPITPayload>
          }
          createMany: {
            args: Prisma.PULPITCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PULPITDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PULPITPayload>
          }
          update: {
            args: Prisma.PULPITUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PULPITPayload>
          }
          deleteMany: {
            args: Prisma.PULPITDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PULPITUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PULPITUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PULPITPayload>
          }
          aggregate: {
            args: Prisma.PULPITAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePULPIT>
          }
          groupBy: {
            args: Prisma.PULPITGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PULPITGroupByOutputType>[]
          }
          count: {
            args: Prisma.PULPITCountArgs<ExtArgs>,
            result: $Utils.Optional<PULPITCountAggregateOutputType> | number
          }
        }
      }
      SUBJECT: {
        payload: Prisma.$SUBJECTPayload<ExtArgs>
        fields: Prisma.SUBJECTFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SUBJECTFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SUBJECTPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SUBJECTFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SUBJECTPayload>
          }
          findFirst: {
            args: Prisma.SUBJECTFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SUBJECTPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SUBJECTFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SUBJECTPayload>
          }
          findMany: {
            args: Prisma.SUBJECTFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SUBJECTPayload>[]
          }
          create: {
            args: Prisma.SUBJECTCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SUBJECTPayload>
          }
          createMany: {
            args: Prisma.SUBJECTCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SUBJECTDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SUBJECTPayload>
          }
          update: {
            args: Prisma.SUBJECTUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SUBJECTPayload>
          }
          deleteMany: {
            args: Prisma.SUBJECTDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SUBJECTUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SUBJECTUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SUBJECTPayload>
          }
          aggregate: {
            args: Prisma.SUBJECTAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSUBJECT>
          }
          groupBy: {
            args: Prisma.SUBJECTGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SUBJECTGroupByOutputType>[]
          }
          count: {
            args: Prisma.SUBJECTCountArgs<ExtArgs>,
            result: $Utils.Optional<SUBJECTCountAggregateOutputType> | number
          }
        }
      }
      TEACHER: {
        payload: Prisma.$TEACHERPayload<ExtArgs>
        fields: Prisma.TEACHERFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TEACHERFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TEACHERPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TEACHERFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TEACHERPayload>
          }
          findFirst: {
            args: Prisma.TEACHERFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TEACHERPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TEACHERFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TEACHERPayload>
          }
          findMany: {
            args: Prisma.TEACHERFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TEACHERPayload>[]
          }
          create: {
            args: Prisma.TEACHERCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TEACHERPayload>
          }
          createMany: {
            args: Prisma.TEACHERCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TEACHERDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TEACHERPayload>
          }
          update: {
            args: Prisma.TEACHERUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TEACHERPayload>
          }
          deleteMany: {
            args: Prisma.TEACHERDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TEACHERUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TEACHERUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TEACHERPayload>
          }
          aggregate: {
            args: Prisma.TEACHERAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTEACHER>
          }
          groupBy: {
            args: Prisma.TEACHERGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TEACHERGroupByOutputType>[]
          }
          count: {
            args: Prisma.TEACHERCountArgs<ExtArgs>,
            result: $Utils.Optional<TEACHERCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AUDITORIUM_TYPECountOutputType
   */

  export type AUDITORIUM_TYPECountOutputType = {
    AUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPE: number
  }

  export type AUDITORIUM_TYPECountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    AUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPE?: boolean | AUDITORIUM_TYPECountOutputTypeCountAUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEArgs
  }

  // Custom InputTypes

  /**
   * AUDITORIUM_TYPECountOutputType without action
   */
  export type AUDITORIUM_TYPECountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AUDITORIUM_TYPECountOutputType
     */
    select?: AUDITORIUM_TYPECountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AUDITORIUM_TYPECountOutputType without action
   */
  export type AUDITORIUM_TYPECountOutputTypeCountAUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AUDITORIUMWhereInput
  }



  /**
   * Count Type FACULTYCountOutputType
   */

  export type FACULTYCountOutputType = {
    PULPIT_PULPIT_FACULTYToFACULTY: number
  }

  export type FACULTYCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    PULPIT_PULPIT_FACULTYToFACULTY?: boolean | FACULTYCountOutputTypeCountPULPIT_PULPIT_FACULTYToFACULTYArgs
  }

  // Custom InputTypes

  /**
   * FACULTYCountOutputType without action
   */
  export type FACULTYCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FACULTYCountOutputType
     */
    select?: FACULTYCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * FACULTYCountOutputType without action
   */
  export type FACULTYCountOutputTypeCountPULPIT_PULPIT_FACULTYToFACULTYArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PULPITWhereInput
  }



  /**
   * Count Type PULPITCountOutputType
   */

  export type PULPITCountOutputType = {
    SUBJECT_SUBJECT_PULPITToPULPIT: number
    TEACHER_TEACHER_PULPITToPULPIT: number
  }

  export type PULPITCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    SUBJECT_SUBJECT_PULPITToPULPIT?: boolean | PULPITCountOutputTypeCountSUBJECT_SUBJECT_PULPITToPULPITArgs
    TEACHER_TEACHER_PULPITToPULPIT?: boolean | PULPITCountOutputTypeCountTEACHER_TEACHER_PULPITToPULPITArgs
  }

  // Custom InputTypes

  /**
   * PULPITCountOutputType without action
   */
  export type PULPITCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PULPITCountOutputType
     */
    select?: PULPITCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PULPITCountOutputType without action
   */
  export type PULPITCountOutputTypeCountSUBJECT_SUBJECT_PULPITToPULPITArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SUBJECTWhereInput
  }


  /**
   * PULPITCountOutputType without action
   */
  export type PULPITCountOutputTypeCountTEACHER_TEACHER_PULPITToPULPITArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TEACHERWhereInput
  }



  /**
   * Models
   */

  /**
   * Model AUDITORIUM
   */

  export type AggregateAUDITORIUM = {
    _count: AUDITORIUMCountAggregateOutputType | null
    _avg: AUDITORIUMAvgAggregateOutputType | null
    _sum: AUDITORIUMSumAggregateOutputType | null
    _min: AUDITORIUMMinAggregateOutputType | null
    _max: AUDITORIUMMaxAggregateOutputType | null
  }

  export type AUDITORIUMAvgAggregateOutputType = {
    AUDITORIUM_CAPACITY: number | null
  }

  export type AUDITORIUMSumAggregateOutputType = {
    AUDITORIUM_CAPACITY: number | null
  }

  export type AUDITORIUMMinAggregateOutputType = {
    AUDITORIUM: string | null
    AUDITORIUM_NAME: string | null
    AUDITORIUM_CAPACITY: number | null
    AUDITORIUM_TYPE: string | null
  }

  export type AUDITORIUMMaxAggregateOutputType = {
    AUDITORIUM: string | null
    AUDITORIUM_NAME: string | null
    AUDITORIUM_CAPACITY: number | null
    AUDITORIUM_TYPE: string | null
  }

  export type AUDITORIUMCountAggregateOutputType = {
    AUDITORIUM: number
    AUDITORIUM_NAME: number
    AUDITORIUM_CAPACITY: number
    AUDITORIUM_TYPE: number
    _all: number
  }


  export type AUDITORIUMAvgAggregateInputType = {
    AUDITORIUM_CAPACITY?: true
  }

  export type AUDITORIUMSumAggregateInputType = {
    AUDITORIUM_CAPACITY?: true
  }

  export type AUDITORIUMMinAggregateInputType = {
    AUDITORIUM?: true
    AUDITORIUM_NAME?: true
    AUDITORIUM_CAPACITY?: true
    AUDITORIUM_TYPE?: true
  }

  export type AUDITORIUMMaxAggregateInputType = {
    AUDITORIUM?: true
    AUDITORIUM_NAME?: true
    AUDITORIUM_CAPACITY?: true
    AUDITORIUM_TYPE?: true
  }

  export type AUDITORIUMCountAggregateInputType = {
    AUDITORIUM?: true
    AUDITORIUM_NAME?: true
    AUDITORIUM_CAPACITY?: true
    AUDITORIUM_TYPE?: true
    _all?: true
  }

  export type AUDITORIUMAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AUDITORIUM to aggregate.
     */
    where?: AUDITORIUMWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AUDITORIUMS to fetch.
     */
    orderBy?: AUDITORIUMOrderByWithRelationInput | AUDITORIUMOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AUDITORIUMWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AUDITORIUMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AUDITORIUMS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AUDITORIUMS
    **/
    _count?: true | AUDITORIUMCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AUDITORIUMAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AUDITORIUMSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AUDITORIUMMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AUDITORIUMMaxAggregateInputType
  }

  export type GetAUDITORIUMAggregateType<T extends AUDITORIUMAggregateArgs> = {
        [P in keyof T & keyof AggregateAUDITORIUM]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAUDITORIUM[P]>
      : GetScalarType<T[P], AggregateAUDITORIUM[P]>
  }




  export type AUDITORIUMGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AUDITORIUMWhereInput
    orderBy?: AUDITORIUMOrderByWithAggregationInput | AUDITORIUMOrderByWithAggregationInput[]
    by: AUDITORIUMScalarFieldEnum[] | AUDITORIUMScalarFieldEnum
    having?: AUDITORIUMScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AUDITORIUMCountAggregateInputType | true
    _avg?: AUDITORIUMAvgAggregateInputType
    _sum?: AUDITORIUMSumAggregateInputType
    _min?: AUDITORIUMMinAggregateInputType
    _max?: AUDITORIUMMaxAggregateInputType
  }

  export type AUDITORIUMGroupByOutputType = {
    AUDITORIUM: string
    AUDITORIUM_NAME: string | null
    AUDITORIUM_CAPACITY: number | null
    AUDITORIUM_TYPE: string
    _count: AUDITORIUMCountAggregateOutputType | null
    _avg: AUDITORIUMAvgAggregateOutputType | null
    _sum: AUDITORIUMSumAggregateOutputType | null
    _min: AUDITORIUMMinAggregateOutputType | null
    _max: AUDITORIUMMaxAggregateOutputType | null
  }

  type GetAUDITORIUMGroupByPayload<T extends AUDITORIUMGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AUDITORIUMGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AUDITORIUMGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AUDITORIUMGroupByOutputType[P]>
            : GetScalarType<T[P], AUDITORIUMGroupByOutputType[P]>
        }
      >
    >


  export type AUDITORIUMSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AUDITORIUM?: boolean
    AUDITORIUM_NAME?: boolean
    AUDITORIUM_CAPACITY?: boolean
    AUDITORIUM_TYPE?: boolean
    AUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPE?: boolean | AUDITORIUM_TYPEDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aUDITORIUM"]>

  export type AUDITORIUMSelectScalar = {
    AUDITORIUM?: boolean
    AUDITORIUM_NAME?: boolean
    AUDITORIUM_CAPACITY?: boolean
    AUDITORIUM_TYPE?: boolean
  }

  export type AUDITORIUMInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    AUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPE?: boolean | AUDITORIUM_TYPEDefaultArgs<ExtArgs>
  }


  export type $AUDITORIUMPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AUDITORIUM"
    objects: {
      AUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPE: Prisma.$AUDITORIUM_TYPEPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      AUDITORIUM: string
      AUDITORIUM_NAME: string | null
      AUDITORIUM_CAPACITY: number | null
      AUDITORIUM_TYPE: string
    }, ExtArgs["result"]["aUDITORIUM"]>
    composites: {}
  }


  type AUDITORIUMGetPayload<S extends boolean | null | undefined | AUDITORIUMDefaultArgs> = $Result.GetResult<Prisma.$AUDITORIUMPayload, S>

  type AUDITORIUMCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AUDITORIUMFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AUDITORIUMCountAggregateInputType | true
    }

  export interface AUDITORIUMDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AUDITORIUM'], meta: { name: 'AUDITORIUM' } }
    /**
     * Find zero or one AUDITORIUM that matches the filter.
     * @param {AUDITORIUMFindUniqueArgs} args - Arguments to find a AUDITORIUM
     * @example
     * // Get one AUDITORIUM
     * const aUDITORIUM = await prisma.aUDITORIUM.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AUDITORIUMFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AUDITORIUMFindUniqueArgs<ExtArgs>>
    ): Prisma__AUDITORIUMClient<$Result.GetResult<Prisma.$AUDITORIUMPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one AUDITORIUM that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AUDITORIUMFindUniqueOrThrowArgs} args - Arguments to find a AUDITORIUM
     * @example
     * // Get one AUDITORIUM
     * const aUDITORIUM = await prisma.aUDITORIUM.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AUDITORIUMFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AUDITORIUMFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AUDITORIUMClient<$Result.GetResult<Prisma.$AUDITORIUMPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first AUDITORIUM that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AUDITORIUMFindFirstArgs} args - Arguments to find a AUDITORIUM
     * @example
     * // Get one AUDITORIUM
     * const aUDITORIUM = await prisma.aUDITORIUM.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AUDITORIUMFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AUDITORIUMFindFirstArgs<ExtArgs>>
    ): Prisma__AUDITORIUMClient<$Result.GetResult<Prisma.$AUDITORIUMPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first AUDITORIUM that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AUDITORIUMFindFirstOrThrowArgs} args - Arguments to find a AUDITORIUM
     * @example
     * // Get one AUDITORIUM
     * const aUDITORIUM = await prisma.aUDITORIUM.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AUDITORIUMFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AUDITORIUMFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AUDITORIUMClient<$Result.GetResult<Prisma.$AUDITORIUMPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more AUDITORIUMS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AUDITORIUMFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AUDITORIUMS
     * const aUDITORIUMS = await prisma.aUDITORIUM.findMany()
     * 
     * // Get first 10 AUDITORIUMS
     * const aUDITORIUMS = await prisma.aUDITORIUM.findMany({ take: 10 })
     * 
     * // Only select the `AUDITORIUM`
     * const aUDITORIUMWithAUDITORIUMOnly = await prisma.aUDITORIUM.findMany({ select: { AUDITORIUM: true } })
     * 
    **/
    findMany<T extends AUDITORIUMFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AUDITORIUMFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AUDITORIUMPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a AUDITORIUM.
     * @param {AUDITORIUMCreateArgs} args - Arguments to create a AUDITORIUM.
     * @example
     * // Create one AUDITORIUM
     * const AUDITORIUM = await prisma.aUDITORIUM.create({
     *   data: {
     *     // ... data to create a AUDITORIUM
     *   }
     * })
     * 
    **/
    create<T extends AUDITORIUMCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AUDITORIUMCreateArgs<ExtArgs>>
    ): Prisma__AUDITORIUMClient<$Result.GetResult<Prisma.$AUDITORIUMPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many AUDITORIUMS.
     *     @param {AUDITORIUMCreateManyArgs} args - Arguments to create many AUDITORIUMS.
     *     @example
     *     // Create many AUDITORIUMS
     *     const aUDITORIUM = await prisma.aUDITORIUM.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AUDITORIUMCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AUDITORIUMCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AUDITORIUM.
     * @param {AUDITORIUMDeleteArgs} args - Arguments to delete one AUDITORIUM.
     * @example
     * // Delete one AUDITORIUM
     * const AUDITORIUM = await prisma.aUDITORIUM.delete({
     *   where: {
     *     // ... filter to delete one AUDITORIUM
     *   }
     * })
     * 
    **/
    delete<T extends AUDITORIUMDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AUDITORIUMDeleteArgs<ExtArgs>>
    ): Prisma__AUDITORIUMClient<$Result.GetResult<Prisma.$AUDITORIUMPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one AUDITORIUM.
     * @param {AUDITORIUMUpdateArgs} args - Arguments to update one AUDITORIUM.
     * @example
     * // Update one AUDITORIUM
     * const aUDITORIUM = await prisma.aUDITORIUM.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AUDITORIUMUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AUDITORIUMUpdateArgs<ExtArgs>>
    ): Prisma__AUDITORIUMClient<$Result.GetResult<Prisma.$AUDITORIUMPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more AUDITORIUMS.
     * @param {AUDITORIUMDeleteManyArgs} args - Arguments to filter AUDITORIUMS to delete.
     * @example
     * // Delete a few AUDITORIUMS
     * const { count } = await prisma.aUDITORIUM.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AUDITORIUMDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AUDITORIUMDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AUDITORIUMS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AUDITORIUMUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AUDITORIUMS
     * const aUDITORIUM = await prisma.aUDITORIUM.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AUDITORIUMUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AUDITORIUMUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AUDITORIUM.
     * @param {AUDITORIUMUpsertArgs} args - Arguments to update or create a AUDITORIUM.
     * @example
     * // Update or create a AUDITORIUM
     * const aUDITORIUM = await prisma.aUDITORIUM.upsert({
     *   create: {
     *     // ... data to create a AUDITORIUM
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AUDITORIUM we want to update
     *   }
     * })
    **/
    upsert<T extends AUDITORIUMUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AUDITORIUMUpsertArgs<ExtArgs>>
    ): Prisma__AUDITORIUMClient<$Result.GetResult<Prisma.$AUDITORIUMPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of AUDITORIUMS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AUDITORIUMCountArgs} args - Arguments to filter AUDITORIUMS to count.
     * @example
     * // Count the number of AUDITORIUMS
     * const count = await prisma.aUDITORIUM.count({
     *   where: {
     *     // ... the filter for the AUDITORIUMS we want to count
     *   }
     * })
    **/
    count<T extends AUDITORIUMCountArgs>(
      args?: Subset<T, AUDITORIUMCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AUDITORIUMCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AUDITORIUM.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AUDITORIUMAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AUDITORIUMAggregateArgs>(args: Subset<T, AUDITORIUMAggregateArgs>): Prisma.PrismaPromise<GetAUDITORIUMAggregateType<T>>

    /**
     * Group by AUDITORIUM.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AUDITORIUMGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AUDITORIUMGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AUDITORIUMGroupByArgs['orderBy'] }
        : { orderBy?: AUDITORIUMGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AUDITORIUMGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAUDITORIUMGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AUDITORIUM model
   */
  readonly fields: AUDITORIUMFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AUDITORIUM.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AUDITORIUMClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    AUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPE<T extends AUDITORIUM_TYPEDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AUDITORIUM_TYPEDefaultArgs<ExtArgs>>): Prisma__AUDITORIUM_TYPEClient<$Result.GetResult<Prisma.$AUDITORIUM_TYPEPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the AUDITORIUM model
   */ 
  interface AUDITORIUMFieldRefs {
    readonly AUDITORIUM: FieldRef<"AUDITORIUM", 'String'>
    readonly AUDITORIUM_NAME: FieldRef<"AUDITORIUM", 'String'>
    readonly AUDITORIUM_CAPACITY: FieldRef<"AUDITORIUM", 'Int'>
    readonly AUDITORIUM_TYPE: FieldRef<"AUDITORIUM", 'String'>
  }
    

  // Custom InputTypes

  /**
   * AUDITORIUM findUnique
   */
  export type AUDITORIUMFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AUDITORIUM
     */
    select?: AUDITORIUMSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AUDITORIUMInclude<ExtArgs> | null
    /**
     * Filter, which AUDITORIUM to fetch.
     */
    where: AUDITORIUMWhereUniqueInput
  }


  /**
   * AUDITORIUM findUniqueOrThrow
   */
  export type AUDITORIUMFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AUDITORIUM
     */
    select?: AUDITORIUMSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AUDITORIUMInclude<ExtArgs> | null
    /**
     * Filter, which AUDITORIUM to fetch.
     */
    where: AUDITORIUMWhereUniqueInput
  }


  /**
   * AUDITORIUM findFirst
   */
  export type AUDITORIUMFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AUDITORIUM
     */
    select?: AUDITORIUMSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AUDITORIUMInclude<ExtArgs> | null
    /**
     * Filter, which AUDITORIUM to fetch.
     */
    where?: AUDITORIUMWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AUDITORIUMS to fetch.
     */
    orderBy?: AUDITORIUMOrderByWithRelationInput | AUDITORIUMOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AUDITORIUMS.
     */
    cursor?: AUDITORIUMWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AUDITORIUMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AUDITORIUMS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AUDITORIUMS.
     */
    distinct?: AUDITORIUMScalarFieldEnum | AUDITORIUMScalarFieldEnum[]
  }


  /**
   * AUDITORIUM findFirstOrThrow
   */
  export type AUDITORIUMFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AUDITORIUM
     */
    select?: AUDITORIUMSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AUDITORIUMInclude<ExtArgs> | null
    /**
     * Filter, which AUDITORIUM to fetch.
     */
    where?: AUDITORIUMWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AUDITORIUMS to fetch.
     */
    orderBy?: AUDITORIUMOrderByWithRelationInput | AUDITORIUMOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AUDITORIUMS.
     */
    cursor?: AUDITORIUMWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AUDITORIUMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AUDITORIUMS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AUDITORIUMS.
     */
    distinct?: AUDITORIUMScalarFieldEnum | AUDITORIUMScalarFieldEnum[]
  }


  /**
   * AUDITORIUM findMany
   */
  export type AUDITORIUMFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AUDITORIUM
     */
    select?: AUDITORIUMSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AUDITORIUMInclude<ExtArgs> | null
    /**
     * Filter, which AUDITORIUMS to fetch.
     */
    where?: AUDITORIUMWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AUDITORIUMS to fetch.
     */
    orderBy?: AUDITORIUMOrderByWithRelationInput | AUDITORIUMOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AUDITORIUMS.
     */
    cursor?: AUDITORIUMWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AUDITORIUMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AUDITORIUMS.
     */
    skip?: number
    distinct?: AUDITORIUMScalarFieldEnum | AUDITORIUMScalarFieldEnum[]
  }


  /**
   * AUDITORIUM create
   */
  export type AUDITORIUMCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AUDITORIUM
     */
    select?: AUDITORIUMSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AUDITORIUMInclude<ExtArgs> | null
    /**
     * The data needed to create a AUDITORIUM.
     */
    data: XOR<AUDITORIUMCreateInput, AUDITORIUMUncheckedCreateInput>
  }


  /**
   * AUDITORIUM createMany
   */
  export type AUDITORIUMCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AUDITORIUMS.
     */
    data: AUDITORIUMCreateManyInput | AUDITORIUMCreateManyInput[]
  }


  /**
   * AUDITORIUM update
   */
  export type AUDITORIUMUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AUDITORIUM
     */
    select?: AUDITORIUMSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AUDITORIUMInclude<ExtArgs> | null
    /**
     * The data needed to update a AUDITORIUM.
     */
    data: XOR<AUDITORIUMUpdateInput, AUDITORIUMUncheckedUpdateInput>
    /**
     * Choose, which AUDITORIUM to update.
     */
    where: AUDITORIUMWhereUniqueInput
  }


  /**
   * AUDITORIUM updateMany
   */
  export type AUDITORIUMUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AUDITORIUMS.
     */
    data: XOR<AUDITORIUMUpdateManyMutationInput, AUDITORIUMUncheckedUpdateManyInput>
    /**
     * Filter which AUDITORIUMS to update
     */
    where?: AUDITORIUMWhereInput
  }


  /**
   * AUDITORIUM upsert
   */
  export type AUDITORIUMUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AUDITORIUM
     */
    select?: AUDITORIUMSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AUDITORIUMInclude<ExtArgs> | null
    /**
     * The filter to search for the AUDITORIUM to update in case it exists.
     */
    where: AUDITORIUMWhereUniqueInput
    /**
     * In case the AUDITORIUM found by the `where` argument doesn't exist, create a new AUDITORIUM with this data.
     */
    create: XOR<AUDITORIUMCreateInput, AUDITORIUMUncheckedCreateInput>
    /**
     * In case the AUDITORIUM was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AUDITORIUMUpdateInput, AUDITORIUMUncheckedUpdateInput>
  }


  /**
   * AUDITORIUM delete
   */
  export type AUDITORIUMDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AUDITORIUM
     */
    select?: AUDITORIUMSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AUDITORIUMInclude<ExtArgs> | null
    /**
     * Filter which AUDITORIUM to delete.
     */
    where: AUDITORIUMWhereUniqueInput
  }


  /**
   * AUDITORIUM deleteMany
   */
  export type AUDITORIUMDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AUDITORIUMS to delete
     */
    where?: AUDITORIUMWhereInput
  }


  /**
   * AUDITORIUM without action
   */
  export type AUDITORIUMDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AUDITORIUM
     */
    select?: AUDITORIUMSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AUDITORIUMInclude<ExtArgs> | null
  }



  /**
   * Model AUDITORIUM_TYPE
   */

  export type AggregateAUDITORIUM_TYPE = {
    _count: AUDITORIUM_TYPECountAggregateOutputType | null
    _min: AUDITORIUM_TYPEMinAggregateOutputType | null
    _max: AUDITORIUM_TYPEMaxAggregateOutputType | null
  }

  export type AUDITORIUM_TYPEMinAggregateOutputType = {
    AUDITORIUM_TYPE: string | null
    AUDITORIUM_TYPENAME: string | null
  }

  export type AUDITORIUM_TYPEMaxAggregateOutputType = {
    AUDITORIUM_TYPE: string | null
    AUDITORIUM_TYPENAME: string | null
  }

  export type AUDITORIUM_TYPECountAggregateOutputType = {
    AUDITORIUM_TYPE: number
    AUDITORIUM_TYPENAME: number
    _all: number
  }


  export type AUDITORIUM_TYPEMinAggregateInputType = {
    AUDITORIUM_TYPE?: true
    AUDITORIUM_TYPENAME?: true
  }

  export type AUDITORIUM_TYPEMaxAggregateInputType = {
    AUDITORIUM_TYPE?: true
    AUDITORIUM_TYPENAME?: true
  }

  export type AUDITORIUM_TYPECountAggregateInputType = {
    AUDITORIUM_TYPE?: true
    AUDITORIUM_TYPENAME?: true
    _all?: true
  }

  export type AUDITORIUM_TYPEAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AUDITORIUM_TYPE to aggregate.
     */
    where?: AUDITORIUM_TYPEWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AUDITORIUM_TYPES to fetch.
     */
    orderBy?: AUDITORIUM_TYPEOrderByWithRelationInput | AUDITORIUM_TYPEOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AUDITORIUM_TYPEWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AUDITORIUM_TYPES from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AUDITORIUM_TYPES.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AUDITORIUM_TYPES
    **/
    _count?: true | AUDITORIUM_TYPECountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AUDITORIUM_TYPEMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AUDITORIUM_TYPEMaxAggregateInputType
  }

  export type GetAUDITORIUM_TYPEAggregateType<T extends AUDITORIUM_TYPEAggregateArgs> = {
        [P in keyof T & keyof AggregateAUDITORIUM_TYPE]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAUDITORIUM_TYPE[P]>
      : GetScalarType<T[P], AggregateAUDITORIUM_TYPE[P]>
  }




  export type AUDITORIUM_TYPEGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AUDITORIUM_TYPEWhereInput
    orderBy?: AUDITORIUM_TYPEOrderByWithAggregationInput | AUDITORIUM_TYPEOrderByWithAggregationInput[]
    by: AUDITORIUM_TYPEScalarFieldEnum[] | AUDITORIUM_TYPEScalarFieldEnum
    having?: AUDITORIUM_TYPEScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AUDITORIUM_TYPECountAggregateInputType | true
    _min?: AUDITORIUM_TYPEMinAggregateInputType
    _max?: AUDITORIUM_TYPEMaxAggregateInputType
  }

  export type AUDITORIUM_TYPEGroupByOutputType = {
    AUDITORIUM_TYPE: string
    AUDITORIUM_TYPENAME: string
    _count: AUDITORIUM_TYPECountAggregateOutputType | null
    _min: AUDITORIUM_TYPEMinAggregateOutputType | null
    _max: AUDITORIUM_TYPEMaxAggregateOutputType | null
  }

  type GetAUDITORIUM_TYPEGroupByPayload<T extends AUDITORIUM_TYPEGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AUDITORIUM_TYPEGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AUDITORIUM_TYPEGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AUDITORIUM_TYPEGroupByOutputType[P]>
            : GetScalarType<T[P], AUDITORIUM_TYPEGroupByOutputType[P]>
        }
      >
    >


  export type AUDITORIUM_TYPESelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AUDITORIUM_TYPE?: boolean
    AUDITORIUM_TYPENAME?: boolean
    AUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPE?: boolean | AUDITORIUM_TYPE$AUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEArgs<ExtArgs>
    _count?: boolean | AUDITORIUM_TYPECountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aUDITORIUM_TYPE"]>

  export type AUDITORIUM_TYPESelectScalar = {
    AUDITORIUM_TYPE?: boolean
    AUDITORIUM_TYPENAME?: boolean
  }

  export type AUDITORIUM_TYPEInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    AUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPE?: boolean | AUDITORIUM_TYPE$AUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEArgs<ExtArgs>
    _count?: boolean | AUDITORIUM_TYPECountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $AUDITORIUM_TYPEPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AUDITORIUM_TYPE"
    objects: {
      AUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPE: Prisma.$AUDITORIUMPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      AUDITORIUM_TYPE: string
      AUDITORIUM_TYPENAME: string
    }, ExtArgs["result"]["aUDITORIUM_TYPE"]>
    composites: {}
  }


  type AUDITORIUM_TYPEGetPayload<S extends boolean | null | undefined | AUDITORIUM_TYPEDefaultArgs> = $Result.GetResult<Prisma.$AUDITORIUM_TYPEPayload, S>

  type AUDITORIUM_TYPECountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AUDITORIUM_TYPEFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AUDITORIUM_TYPECountAggregateInputType | true
    }

  export interface AUDITORIUM_TYPEDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AUDITORIUM_TYPE'], meta: { name: 'AUDITORIUM_TYPE' } }
    /**
     * Find zero or one AUDITORIUM_TYPE that matches the filter.
     * @param {AUDITORIUM_TYPEFindUniqueArgs} args - Arguments to find a AUDITORIUM_TYPE
     * @example
     * // Get one AUDITORIUM_TYPE
     * const aUDITORIUM_TYPE = await prisma.aUDITORIUM_TYPE.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AUDITORIUM_TYPEFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AUDITORIUM_TYPEFindUniqueArgs<ExtArgs>>
    ): Prisma__AUDITORIUM_TYPEClient<$Result.GetResult<Prisma.$AUDITORIUM_TYPEPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one AUDITORIUM_TYPE that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AUDITORIUM_TYPEFindUniqueOrThrowArgs} args - Arguments to find a AUDITORIUM_TYPE
     * @example
     * // Get one AUDITORIUM_TYPE
     * const aUDITORIUM_TYPE = await prisma.aUDITORIUM_TYPE.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AUDITORIUM_TYPEFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AUDITORIUM_TYPEFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AUDITORIUM_TYPEClient<$Result.GetResult<Prisma.$AUDITORIUM_TYPEPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first AUDITORIUM_TYPE that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AUDITORIUM_TYPEFindFirstArgs} args - Arguments to find a AUDITORIUM_TYPE
     * @example
     * // Get one AUDITORIUM_TYPE
     * const aUDITORIUM_TYPE = await prisma.aUDITORIUM_TYPE.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AUDITORIUM_TYPEFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AUDITORIUM_TYPEFindFirstArgs<ExtArgs>>
    ): Prisma__AUDITORIUM_TYPEClient<$Result.GetResult<Prisma.$AUDITORIUM_TYPEPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first AUDITORIUM_TYPE that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AUDITORIUM_TYPEFindFirstOrThrowArgs} args - Arguments to find a AUDITORIUM_TYPE
     * @example
     * // Get one AUDITORIUM_TYPE
     * const aUDITORIUM_TYPE = await prisma.aUDITORIUM_TYPE.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AUDITORIUM_TYPEFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AUDITORIUM_TYPEFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AUDITORIUM_TYPEClient<$Result.GetResult<Prisma.$AUDITORIUM_TYPEPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more AUDITORIUM_TYPES that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AUDITORIUM_TYPEFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AUDITORIUM_TYPES
     * const aUDITORIUM_TYPES = await prisma.aUDITORIUM_TYPE.findMany()
     * 
     * // Get first 10 AUDITORIUM_TYPES
     * const aUDITORIUM_TYPES = await prisma.aUDITORIUM_TYPE.findMany({ take: 10 })
     * 
     * // Only select the `AUDITORIUM_TYPE`
     * const aUDITORIUM_TYPEWithAUDITORIUM_TYPEOnly = await prisma.aUDITORIUM_TYPE.findMany({ select: { AUDITORIUM_TYPE: true } })
     * 
    **/
    findMany<T extends AUDITORIUM_TYPEFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AUDITORIUM_TYPEFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AUDITORIUM_TYPEPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a AUDITORIUM_TYPE.
     * @param {AUDITORIUM_TYPECreateArgs} args - Arguments to create a AUDITORIUM_TYPE.
     * @example
     * // Create one AUDITORIUM_TYPE
     * const AUDITORIUM_TYPE = await prisma.aUDITORIUM_TYPE.create({
     *   data: {
     *     // ... data to create a AUDITORIUM_TYPE
     *   }
     * })
     * 
    **/
    create<T extends AUDITORIUM_TYPECreateArgs<ExtArgs>>(
      args: SelectSubset<T, AUDITORIUM_TYPECreateArgs<ExtArgs>>
    ): Prisma__AUDITORIUM_TYPEClient<$Result.GetResult<Prisma.$AUDITORIUM_TYPEPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many AUDITORIUM_TYPES.
     *     @param {AUDITORIUM_TYPECreateManyArgs} args - Arguments to create many AUDITORIUM_TYPES.
     *     @example
     *     // Create many AUDITORIUM_TYPES
     *     const aUDITORIUM_TYPE = await prisma.aUDITORIUM_TYPE.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AUDITORIUM_TYPECreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AUDITORIUM_TYPECreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AUDITORIUM_TYPE.
     * @param {AUDITORIUM_TYPEDeleteArgs} args - Arguments to delete one AUDITORIUM_TYPE.
     * @example
     * // Delete one AUDITORIUM_TYPE
     * const AUDITORIUM_TYPE = await prisma.aUDITORIUM_TYPE.delete({
     *   where: {
     *     // ... filter to delete one AUDITORIUM_TYPE
     *   }
     * })
     * 
    **/
    delete<T extends AUDITORIUM_TYPEDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AUDITORIUM_TYPEDeleteArgs<ExtArgs>>
    ): Prisma__AUDITORIUM_TYPEClient<$Result.GetResult<Prisma.$AUDITORIUM_TYPEPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one AUDITORIUM_TYPE.
     * @param {AUDITORIUM_TYPEUpdateArgs} args - Arguments to update one AUDITORIUM_TYPE.
     * @example
     * // Update one AUDITORIUM_TYPE
     * const aUDITORIUM_TYPE = await prisma.aUDITORIUM_TYPE.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AUDITORIUM_TYPEUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AUDITORIUM_TYPEUpdateArgs<ExtArgs>>
    ): Prisma__AUDITORIUM_TYPEClient<$Result.GetResult<Prisma.$AUDITORIUM_TYPEPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more AUDITORIUM_TYPES.
     * @param {AUDITORIUM_TYPEDeleteManyArgs} args - Arguments to filter AUDITORIUM_TYPES to delete.
     * @example
     * // Delete a few AUDITORIUM_TYPES
     * const { count } = await prisma.aUDITORIUM_TYPE.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AUDITORIUM_TYPEDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AUDITORIUM_TYPEDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AUDITORIUM_TYPES.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AUDITORIUM_TYPEUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AUDITORIUM_TYPES
     * const aUDITORIUM_TYPE = await prisma.aUDITORIUM_TYPE.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AUDITORIUM_TYPEUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AUDITORIUM_TYPEUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AUDITORIUM_TYPE.
     * @param {AUDITORIUM_TYPEUpsertArgs} args - Arguments to update or create a AUDITORIUM_TYPE.
     * @example
     * // Update or create a AUDITORIUM_TYPE
     * const aUDITORIUM_TYPE = await prisma.aUDITORIUM_TYPE.upsert({
     *   create: {
     *     // ... data to create a AUDITORIUM_TYPE
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AUDITORIUM_TYPE we want to update
     *   }
     * })
    **/
    upsert<T extends AUDITORIUM_TYPEUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AUDITORIUM_TYPEUpsertArgs<ExtArgs>>
    ): Prisma__AUDITORIUM_TYPEClient<$Result.GetResult<Prisma.$AUDITORIUM_TYPEPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of AUDITORIUM_TYPES.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AUDITORIUM_TYPECountArgs} args - Arguments to filter AUDITORIUM_TYPES to count.
     * @example
     * // Count the number of AUDITORIUM_TYPES
     * const count = await prisma.aUDITORIUM_TYPE.count({
     *   where: {
     *     // ... the filter for the AUDITORIUM_TYPES we want to count
     *   }
     * })
    **/
    count<T extends AUDITORIUM_TYPECountArgs>(
      args?: Subset<T, AUDITORIUM_TYPECountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AUDITORIUM_TYPECountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AUDITORIUM_TYPE.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AUDITORIUM_TYPEAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AUDITORIUM_TYPEAggregateArgs>(args: Subset<T, AUDITORIUM_TYPEAggregateArgs>): Prisma.PrismaPromise<GetAUDITORIUM_TYPEAggregateType<T>>

    /**
     * Group by AUDITORIUM_TYPE.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AUDITORIUM_TYPEGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AUDITORIUM_TYPEGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AUDITORIUM_TYPEGroupByArgs['orderBy'] }
        : { orderBy?: AUDITORIUM_TYPEGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AUDITORIUM_TYPEGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAUDITORIUM_TYPEGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AUDITORIUM_TYPE model
   */
  readonly fields: AUDITORIUM_TYPEFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AUDITORIUM_TYPE.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AUDITORIUM_TYPEClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    AUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPE<T extends AUDITORIUM_TYPE$AUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEArgs<ExtArgs> = {}>(args?: Subset<T, AUDITORIUM_TYPE$AUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AUDITORIUMPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the AUDITORIUM_TYPE model
   */ 
  interface AUDITORIUM_TYPEFieldRefs {
    readonly AUDITORIUM_TYPE: FieldRef<"AUDITORIUM_TYPE", 'String'>
    readonly AUDITORIUM_TYPENAME: FieldRef<"AUDITORIUM_TYPE", 'String'>
  }
    

  // Custom InputTypes

  /**
   * AUDITORIUM_TYPE findUnique
   */
  export type AUDITORIUM_TYPEFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AUDITORIUM_TYPE
     */
    select?: AUDITORIUM_TYPESelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AUDITORIUM_TYPEInclude<ExtArgs> | null
    /**
     * Filter, which AUDITORIUM_TYPE to fetch.
     */
    where: AUDITORIUM_TYPEWhereUniqueInput
  }


  /**
   * AUDITORIUM_TYPE findUniqueOrThrow
   */
  export type AUDITORIUM_TYPEFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AUDITORIUM_TYPE
     */
    select?: AUDITORIUM_TYPESelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AUDITORIUM_TYPEInclude<ExtArgs> | null
    /**
     * Filter, which AUDITORIUM_TYPE to fetch.
     */
    where: AUDITORIUM_TYPEWhereUniqueInput
  }


  /**
   * AUDITORIUM_TYPE findFirst
   */
  export type AUDITORIUM_TYPEFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AUDITORIUM_TYPE
     */
    select?: AUDITORIUM_TYPESelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AUDITORIUM_TYPEInclude<ExtArgs> | null
    /**
     * Filter, which AUDITORIUM_TYPE to fetch.
     */
    where?: AUDITORIUM_TYPEWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AUDITORIUM_TYPES to fetch.
     */
    orderBy?: AUDITORIUM_TYPEOrderByWithRelationInput | AUDITORIUM_TYPEOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AUDITORIUM_TYPES.
     */
    cursor?: AUDITORIUM_TYPEWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AUDITORIUM_TYPES from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AUDITORIUM_TYPES.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AUDITORIUM_TYPES.
     */
    distinct?: AUDITORIUM_TYPEScalarFieldEnum | AUDITORIUM_TYPEScalarFieldEnum[]
  }


  /**
   * AUDITORIUM_TYPE findFirstOrThrow
   */
  export type AUDITORIUM_TYPEFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AUDITORIUM_TYPE
     */
    select?: AUDITORIUM_TYPESelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AUDITORIUM_TYPEInclude<ExtArgs> | null
    /**
     * Filter, which AUDITORIUM_TYPE to fetch.
     */
    where?: AUDITORIUM_TYPEWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AUDITORIUM_TYPES to fetch.
     */
    orderBy?: AUDITORIUM_TYPEOrderByWithRelationInput | AUDITORIUM_TYPEOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AUDITORIUM_TYPES.
     */
    cursor?: AUDITORIUM_TYPEWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AUDITORIUM_TYPES from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AUDITORIUM_TYPES.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AUDITORIUM_TYPES.
     */
    distinct?: AUDITORIUM_TYPEScalarFieldEnum | AUDITORIUM_TYPEScalarFieldEnum[]
  }


  /**
   * AUDITORIUM_TYPE findMany
   */
  export type AUDITORIUM_TYPEFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AUDITORIUM_TYPE
     */
    select?: AUDITORIUM_TYPESelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AUDITORIUM_TYPEInclude<ExtArgs> | null
    /**
     * Filter, which AUDITORIUM_TYPES to fetch.
     */
    where?: AUDITORIUM_TYPEWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AUDITORIUM_TYPES to fetch.
     */
    orderBy?: AUDITORIUM_TYPEOrderByWithRelationInput | AUDITORIUM_TYPEOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AUDITORIUM_TYPES.
     */
    cursor?: AUDITORIUM_TYPEWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AUDITORIUM_TYPES from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AUDITORIUM_TYPES.
     */
    skip?: number
    distinct?: AUDITORIUM_TYPEScalarFieldEnum | AUDITORIUM_TYPEScalarFieldEnum[]
  }


  /**
   * AUDITORIUM_TYPE create
   */
  export type AUDITORIUM_TYPECreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AUDITORIUM_TYPE
     */
    select?: AUDITORIUM_TYPESelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AUDITORIUM_TYPEInclude<ExtArgs> | null
    /**
     * The data needed to create a AUDITORIUM_TYPE.
     */
    data: XOR<AUDITORIUM_TYPECreateInput, AUDITORIUM_TYPEUncheckedCreateInput>
  }


  /**
   * AUDITORIUM_TYPE createMany
   */
  export type AUDITORIUM_TYPECreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AUDITORIUM_TYPES.
     */
    data: AUDITORIUM_TYPECreateManyInput | AUDITORIUM_TYPECreateManyInput[]
  }


  /**
   * AUDITORIUM_TYPE update
   */
  export type AUDITORIUM_TYPEUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AUDITORIUM_TYPE
     */
    select?: AUDITORIUM_TYPESelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AUDITORIUM_TYPEInclude<ExtArgs> | null
    /**
     * The data needed to update a AUDITORIUM_TYPE.
     */
    data: XOR<AUDITORIUM_TYPEUpdateInput, AUDITORIUM_TYPEUncheckedUpdateInput>
    /**
     * Choose, which AUDITORIUM_TYPE to update.
     */
    where: AUDITORIUM_TYPEWhereUniqueInput
  }


  /**
   * AUDITORIUM_TYPE updateMany
   */
  export type AUDITORIUM_TYPEUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AUDITORIUM_TYPES.
     */
    data: XOR<AUDITORIUM_TYPEUpdateManyMutationInput, AUDITORIUM_TYPEUncheckedUpdateManyInput>
    /**
     * Filter which AUDITORIUM_TYPES to update
     */
    where?: AUDITORIUM_TYPEWhereInput
  }


  /**
   * AUDITORIUM_TYPE upsert
   */
  export type AUDITORIUM_TYPEUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AUDITORIUM_TYPE
     */
    select?: AUDITORIUM_TYPESelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AUDITORIUM_TYPEInclude<ExtArgs> | null
    /**
     * The filter to search for the AUDITORIUM_TYPE to update in case it exists.
     */
    where: AUDITORIUM_TYPEWhereUniqueInput
    /**
     * In case the AUDITORIUM_TYPE found by the `where` argument doesn't exist, create a new AUDITORIUM_TYPE with this data.
     */
    create: XOR<AUDITORIUM_TYPECreateInput, AUDITORIUM_TYPEUncheckedCreateInput>
    /**
     * In case the AUDITORIUM_TYPE was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AUDITORIUM_TYPEUpdateInput, AUDITORIUM_TYPEUncheckedUpdateInput>
  }


  /**
   * AUDITORIUM_TYPE delete
   */
  export type AUDITORIUM_TYPEDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AUDITORIUM_TYPE
     */
    select?: AUDITORIUM_TYPESelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AUDITORIUM_TYPEInclude<ExtArgs> | null
    /**
     * Filter which AUDITORIUM_TYPE to delete.
     */
    where: AUDITORIUM_TYPEWhereUniqueInput
  }


  /**
   * AUDITORIUM_TYPE deleteMany
   */
  export type AUDITORIUM_TYPEDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AUDITORIUM_TYPES to delete
     */
    where?: AUDITORIUM_TYPEWhereInput
  }


  /**
   * AUDITORIUM_TYPE.AUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPE
   */
  export type AUDITORIUM_TYPE$AUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AUDITORIUM
     */
    select?: AUDITORIUMSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AUDITORIUMInclude<ExtArgs> | null
    where?: AUDITORIUMWhereInput
    orderBy?: AUDITORIUMOrderByWithRelationInput | AUDITORIUMOrderByWithRelationInput[]
    cursor?: AUDITORIUMWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AUDITORIUMScalarFieldEnum | AUDITORIUMScalarFieldEnum[]
  }


  /**
   * AUDITORIUM_TYPE without action
   */
  export type AUDITORIUM_TYPEDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AUDITORIUM_TYPE
     */
    select?: AUDITORIUM_TYPESelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AUDITORIUM_TYPEInclude<ExtArgs> | null
  }



  /**
   * Model FACULTY
   */

  export type AggregateFACULTY = {
    _count: FACULTYCountAggregateOutputType | null
    _min: FACULTYMinAggregateOutputType | null
    _max: FACULTYMaxAggregateOutputType | null
  }

  export type FACULTYMinAggregateOutputType = {
    FACULTY: string | null
    FACULTY_NAME: string | null
  }

  export type FACULTYMaxAggregateOutputType = {
    FACULTY: string | null
    FACULTY_NAME: string | null
  }

  export type FACULTYCountAggregateOutputType = {
    FACULTY: number
    FACULTY_NAME: number
    _all: number
  }


  export type FACULTYMinAggregateInputType = {
    FACULTY?: true
    FACULTY_NAME?: true
  }

  export type FACULTYMaxAggregateInputType = {
    FACULTY?: true
    FACULTY_NAME?: true
  }

  export type FACULTYCountAggregateInputType = {
    FACULTY?: true
    FACULTY_NAME?: true
    _all?: true
  }

  export type FACULTYAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FACULTY to aggregate.
     */
    where?: FACULTYWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FACULTIES to fetch.
     */
    orderBy?: FACULTYOrderByWithRelationInput | FACULTYOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FACULTYWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FACULTIES from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FACULTIES.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FACULTIES
    **/
    _count?: true | FACULTYCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FACULTYMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FACULTYMaxAggregateInputType
  }

  export type GetFACULTYAggregateType<T extends FACULTYAggregateArgs> = {
        [P in keyof T & keyof AggregateFACULTY]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFACULTY[P]>
      : GetScalarType<T[P], AggregateFACULTY[P]>
  }




  export type FACULTYGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FACULTYWhereInput
    orderBy?: FACULTYOrderByWithAggregationInput | FACULTYOrderByWithAggregationInput[]
    by: FACULTYScalarFieldEnum[] | FACULTYScalarFieldEnum
    having?: FACULTYScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FACULTYCountAggregateInputType | true
    _min?: FACULTYMinAggregateInputType
    _max?: FACULTYMaxAggregateInputType
  }

  export type FACULTYGroupByOutputType = {
    FACULTY: string
    FACULTY_NAME: string
    _count: FACULTYCountAggregateOutputType | null
    _min: FACULTYMinAggregateOutputType | null
    _max: FACULTYMaxAggregateOutputType | null
  }

  type GetFACULTYGroupByPayload<T extends FACULTYGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FACULTYGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FACULTYGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FACULTYGroupByOutputType[P]>
            : GetScalarType<T[P], FACULTYGroupByOutputType[P]>
        }
      >
    >


  export type FACULTYSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    FACULTY?: boolean
    FACULTY_NAME?: boolean
    PULPIT_PULPIT_FACULTYToFACULTY?: boolean | FACULTY$PULPIT_PULPIT_FACULTYToFACULTYArgs<ExtArgs>
    _count?: boolean | FACULTYCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fACULTY"]>

  export type FACULTYSelectScalar = {
    FACULTY?: boolean
    FACULTY_NAME?: boolean
  }

  export type FACULTYInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    PULPIT_PULPIT_FACULTYToFACULTY?: boolean | FACULTY$PULPIT_PULPIT_FACULTYToFACULTYArgs<ExtArgs>
    _count?: boolean | FACULTYCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $FACULTYPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FACULTY"
    objects: {
      PULPIT_PULPIT_FACULTYToFACULTY: Prisma.$PULPITPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      FACULTY: string
      FACULTY_NAME: string
    }, ExtArgs["result"]["fACULTY"]>
    composites: {}
  }


  type FACULTYGetPayload<S extends boolean | null | undefined | FACULTYDefaultArgs> = $Result.GetResult<Prisma.$FACULTYPayload, S>

  type FACULTYCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FACULTYFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FACULTYCountAggregateInputType | true
    }

  export interface FACULTYDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FACULTY'], meta: { name: 'FACULTY' } }
    /**
     * Find zero or one FACULTY that matches the filter.
     * @param {FACULTYFindUniqueArgs} args - Arguments to find a FACULTY
     * @example
     * // Get one FACULTY
     * const fACULTY = await prisma.fACULTY.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FACULTYFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FACULTYFindUniqueArgs<ExtArgs>>
    ): Prisma__FACULTYClient<$Result.GetResult<Prisma.$FACULTYPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one FACULTY that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FACULTYFindUniqueOrThrowArgs} args - Arguments to find a FACULTY
     * @example
     * // Get one FACULTY
     * const fACULTY = await prisma.fACULTY.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FACULTYFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FACULTYFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FACULTYClient<$Result.GetResult<Prisma.$FACULTYPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first FACULTY that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FACULTYFindFirstArgs} args - Arguments to find a FACULTY
     * @example
     * // Get one FACULTY
     * const fACULTY = await prisma.fACULTY.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FACULTYFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FACULTYFindFirstArgs<ExtArgs>>
    ): Prisma__FACULTYClient<$Result.GetResult<Prisma.$FACULTYPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first FACULTY that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FACULTYFindFirstOrThrowArgs} args - Arguments to find a FACULTY
     * @example
     * // Get one FACULTY
     * const fACULTY = await prisma.fACULTY.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FACULTYFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FACULTYFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FACULTYClient<$Result.GetResult<Prisma.$FACULTYPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more FACULTIES that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FACULTYFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FACULTIES
     * const fACULTIES = await prisma.fACULTY.findMany()
     * 
     * // Get first 10 FACULTIES
     * const fACULTIES = await prisma.fACULTY.findMany({ take: 10 })
     * 
     * // Only select the `FACULTY`
     * const fACULTYWithFACULTYOnly = await prisma.fACULTY.findMany({ select: { FACULTY: true } })
     * 
    **/
    findMany<T extends FACULTYFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FACULTYFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FACULTYPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a FACULTY.
     * @param {FACULTYCreateArgs} args - Arguments to create a FACULTY.
     * @example
     * // Create one FACULTY
     * const FACULTY = await prisma.fACULTY.create({
     *   data: {
     *     // ... data to create a FACULTY
     *   }
     * })
     * 
    **/
    create<T extends FACULTYCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FACULTYCreateArgs<ExtArgs>>
    ): Prisma__FACULTYClient<$Result.GetResult<Prisma.$FACULTYPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many FACULTIES.
     *     @param {FACULTYCreateManyArgs} args - Arguments to create many FACULTIES.
     *     @example
     *     // Create many FACULTIES
     *     const fACULTY = await prisma.fACULTY.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FACULTYCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FACULTYCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FACULTY.
     * @param {FACULTYDeleteArgs} args - Arguments to delete one FACULTY.
     * @example
     * // Delete one FACULTY
     * const FACULTY = await prisma.fACULTY.delete({
     *   where: {
     *     // ... filter to delete one FACULTY
     *   }
     * })
     * 
    **/
    delete<T extends FACULTYDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FACULTYDeleteArgs<ExtArgs>>
    ): Prisma__FACULTYClient<$Result.GetResult<Prisma.$FACULTYPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one FACULTY.
     * @param {FACULTYUpdateArgs} args - Arguments to update one FACULTY.
     * @example
     * // Update one FACULTY
     * const fACULTY = await prisma.fACULTY.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FACULTYUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FACULTYUpdateArgs<ExtArgs>>
    ): Prisma__FACULTYClient<$Result.GetResult<Prisma.$FACULTYPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more FACULTIES.
     * @param {FACULTYDeleteManyArgs} args - Arguments to filter FACULTIES to delete.
     * @example
     * // Delete a few FACULTIES
     * const { count } = await prisma.fACULTY.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FACULTYDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FACULTYDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FACULTIES.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FACULTYUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FACULTIES
     * const fACULTY = await prisma.fACULTY.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FACULTYUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FACULTYUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FACULTY.
     * @param {FACULTYUpsertArgs} args - Arguments to update or create a FACULTY.
     * @example
     * // Update or create a FACULTY
     * const fACULTY = await prisma.fACULTY.upsert({
     *   create: {
     *     // ... data to create a FACULTY
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FACULTY we want to update
     *   }
     * })
    **/
    upsert<T extends FACULTYUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FACULTYUpsertArgs<ExtArgs>>
    ): Prisma__FACULTYClient<$Result.GetResult<Prisma.$FACULTYPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of FACULTIES.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FACULTYCountArgs} args - Arguments to filter FACULTIES to count.
     * @example
     * // Count the number of FACULTIES
     * const count = await prisma.fACULTY.count({
     *   where: {
     *     // ... the filter for the FACULTIES we want to count
     *   }
     * })
    **/
    count<T extends FACULTYCountArgs>(
      args?: Subset<T, FACULTYCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FACULTYCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FACULTY.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FACULTYAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FACULTYAggregateArgs>(args: Subset<T, FACULTYAggregateArgs>): Prisma.PrismaPromise<GetFACULTYAggregateType<T>>

    /**
     * Group by FACULTY.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FACULTYGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FACULTYGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FACULTYGroupByArgs['orderBy'] }
        : { orderBy?: FACULTYGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FACULTYGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFACULTYGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FACULTY model
   */
  readonly fields: FACULTYFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FACULTY.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FACULTYClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    PULPIT_PULPIT_FACULTYToFACULTY<T extends FACULTY$PULPIT_PULPIT_FACULTYToFACULTYArgs<ExtArgs> = {}>(args?: Subset<T, FACULTY$PULPIT_PULPIT_FACULTYToFACULTYArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PULPITPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the FACULTY model
   */ 
  interface FACULTYFieldRefs {
    readonly FACULTY: FieldRef<"FACULTY", 'String'>
    readonly FACULTY_NAME: FieldRef<"FACULTY", 'String'>
  }
    

  // Custom InputTypes

  /**
   * FACULTY findUnique
   */
  export type FACULTYFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FACULTY
     */
    select?: FACULTYSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FACULTYInclude<ExtArgs> | null
    /**
     * Filter, which FACULTY to fetch.
     */
    where: FACULTYWhereUniqueInput
  }


  /**
   * FACULTY findUniqueOrThrow
   */
  export type FACULTYFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FACULTY
     */
    select?: FACULTYSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FACULTYInclude<ExtArgs> | null
    /**
     * Filter, which FACULTY to fetch.
     */
    where: FACULTYWhereUniqueInput
  }


  /**
   * FACULTY findFirst
   */
  export type FACULTYFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FACULTY
     */
    select?: FACULTYSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FACULTYInclude<ExtArgs> | null
    /**
     * Filter, which FACULTY to fetch.
     */
    where?: FACULTYWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FACULTIES to fetch.
     */
    orderBy?: FACULTYOrderByWithRelationInput | FACULTYOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FACULTIES.
     */
    cursor?: FACULTYWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FACULTIES from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FACULTIES.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FACULTIES.
     */
    distinct?: FACULTYScalarFieldEnum | FACULTYScalarFieldEnum[]
  }


  /**
   * FACULTY findFirstOrThrow
   */
  export type FACULTYFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FACULTY
     */
    select?: FACULTYSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FACULTYInclude<ExtArgs> | null
    /**
     * Filter, which FACULTY to fetch.
     */
    where?: FACULTYWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FACULTIES to fetch.
     */
    orderBy?: FACULTYOrderByWithRelationInput | FACULTYOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FACULTIES.
     */
    cursor?: FACULTYWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FACULTIES from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FACULTIES.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FACULTIES.
     */
    distinct?: FACULTYScalarFieldEnum | FACULTYScalarFieldEnum[]
  }


  /**
   * FACULTY findMany
   */
  export type FACULTYFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FACULTY
     */
    select?: FACULTYSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FACULTYInclude<ExtArgs> | null
    /**
     * Filter, which FACULTIES to fetch.
     */
    where?: FACULTYWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FACULTIES to fetch.
     */
    orderBy?: FACULTYOrderByWithRelationInput | FACULTYOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FACULTIES.
     */
    cursor?: FACULTYWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FACULTIES from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FACULTIES.
     */
    skip?: number
    distinct?: FACULTYScalarFieldEnum | FACULTYScalarFieldEnum[]
  }


  /**
   * FACULTY create
   */
  export type FACULTYCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FACULTY
     */
    select?: FACULTYSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FACULTYInclude<ExtArgs> | null
    /**
     * The data needed to create a FACULTY.
     */
    data: XOR<FACULTYCreateInput, FACULTYUncheckedCreateInput>
  }


  /**
   * FACULTY createMany
   */
  export type FACULTYCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FACULTIES.
     */
    data: FACULTYCreateManyInput | FACULTYCreateManyInput[]
  }


  /**
   * FACULTY update
   */
  export type FACULTYUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FACULTY
     */
    select?: FACULTYSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FACULTYInclude<ExtArgs> | null
    /**
     * The data needed to update a FACULTY.
     */
    data: XOR<FACULTYUpdateInput, FACULTYUncheckedUpdateInput>
    /**
     * Choose, which FACULTY to update.
     */
    where: FACULTYWhereUniqueInput
  }


  /**
   * FACULTY updateMany
   */
  export type FACULTYUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FACULTIES.
     */
    data: XOR<FACULTYUpdateManyMutationInput, FACULTYUncheckedUpdateManyInput>
    /**
     * Filter which FACULTIES to update
     */
    where?: FACULTYWhereInput
  }


  /**
   * FACULTY upsert
   */
  export type FACULTYUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FACULTY
     */
    select?: FACULTYSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FACULTYInclude<ExtArgs> | null
    /**
     * The filter to search for the FACULTY to update in case it exists.
     */
    where: FACULTYWhereUniqueInput
    /**
     * In case the FACULTY found by the `where` argument doesn't exist, create a new FACULTY with this data.
     */
    create: XOR<FACULTYCreateInput, FACULTYUncheckedCreateInput>
    /**
     * In case the FACULTY was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FACULTYUpdateInput, FACULTYUncheckedUpdateInput>
  }


  /**
   * FACULTY delete
   */
  export type FACULTYDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FACULTY
     */
    select?: FACULTYSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FACULTYInclude<ExtArgs> | null
    /**
     * Filter which FACULTY to delete.
     */
    where: FACULTYWhereUniqueInput
  }


  /**
   * FACULTY deleteMany
   */
  export type FACULTYDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FACULTIES to delete
     */
    where?: FACULTYWhereInput
  }


  /**
   * FACULTY.PULPIT_PULPIT_FACULTYToFACULTY
   */
  export type FACULTY$PULPIT_PULPIT_FACULTYToFACULTYArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PULPIT
     */
    select?: PULPITSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PULPITInclude<ExtArgs> | null
    where?: PULPITWhereInput
    orderBy?: PULPITOrderByWithRelationInput | PULPITOrderByWithRelationInput[]
    cursor?: PULPITWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PULPITScalarFieldEnum | PULPITScalarFieldEnum[]
  }


  /**
   * FACULTY without action
   */
  export type FACULTYDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FACULTY
     */
    select?: FACULTYSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FACULTYInclude<ExtArgs> | null
  }



  /**
   * Model PULPIT
   */

  export type AggregatePULPIT = {
    _count: PULPITCountAggregateOutputType | null
    _min: PULPITMinAggregateOutputType | null
    _max: PULPITMaxAggregateOutputType | null
  }

  export type PULPITMinAggregateOutputType = {
    PULPIT: string | null
    PULPIT_NAME: string | null
    FACULTY: string | null
  }

  export type PULPITMaxAggregateOutputType = {
    PULPIT: string | null
    PULPIT_NAME: string | null
    FACULTY: string | null
  }

  export type PULPITCountAggregateOutputType = {
    PULPIT: number
    PULPIT_NAME: number
    FACULTY: number
    _all: number
  }


  export type PULPITMinAggregateInputType = {
    PULPIT?: true
    PULPIT_NAME?: true
    FACULTY?: true
  }

  export type PULPITMaxAggregateInputType = {
    PULPIT?: true
    PULPIT_NAME?: true
    FACULTY?: true
  }

  export type PULPITCountAggregateInputType = {
    PULPIT?: true
    PULPIT_NAME?: true
    FACULTY?: true
    _all?: true
  }

  export type PULPITAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PULPIT to aggregate.
     */
    where?: PULPITWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PULPITS to fetch.
     */
    orderBy?: PULPITOrderByWithRelationInput | PULPITOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PULPITWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PULPITS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PULPITS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PULPITS
    **/
    _count?: true | PULPITCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PULPITMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PULPITMaxAggregateInputType
  }

  export type GetPULPITAggregateType<T extends PULPITAggregateArgs> = {
        [P in keyof T & keyof AggregatePULPIT]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePULPIT[P]>
      : GetScalarType<T[P], AggregatePULPIT[P]>
  }




  export type PULPITGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PULPITWhereInput
    orderBy?: PULPITOrderByWithAggregationInput | PULPITOrderByWithAggregationInput[]
    by: PULPITScalarFieldEnum[] | PULPITScalarFieldEnum
    having?: PULPITScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PULPITCountAggregateInputType | true
    _min?: PULPITMinAggregateInputType
    _max?: PULPITMaxAggregateInputType
  }

  export type PULPITGroupByOutputType = {
    PULPIT: string
    PULPIT_NAME: string | null
    FACULTY: string
    _count: PULPITCountAggregateOutputType | null
    _min: PULPITMinAggregateOutputType | null
    _max: PULPITMaxAggregateOutputType | null
  }

  type GetPULPITGroupByPayload<T extends PULPITGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PULPITGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PULPITGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PULPITGroupByOutputType[P]>
            : GetScalarType<T[P], PULPITGroupByOutputType[P]>
        }
      >
    >


  export type PULPITSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    PULPIT?: boolean
    PULPIT_NAME?: boolean
    FACULTY?: boolean
    FACULTY_PULPIT_FACULTYToFACULTY?: boolean | FACULTYDefaultArgs<ExtArgs>
    SUBJECT_SUBJECT_PULPITToPULPIT?: boolean | PULPIT$SUBJECT_SUBJECT_PULPITToPULPITArgs<ExtArgs>
    TEACHER_TEACHER_PULPITToPULPIT?: boolean | PULPIT$TEACHER_TEACHER_PULPITToPULPITArgs<ExtArgs>
    _count?: boolean | PULPITCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pULPIT"]>

  export type PULPITSelectScalar = {
    PULPIT?: boolean
    PULPIT_NAME?: boolean
    FACULTY?: boolean
  }

  export type PULPITInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    FACULTY_PULPIT_FACULTYToFACULTY?: boolean | FACULTYDefaultArgs<ExtArgs>
    SUBJECT_SUBJECT_PULPITToPULPIT?: boolean | PULPIT$SUBJECT_SUBJECT_PULPITToPULPITArgs<ExtArgs>
    TEACHER_TEACHER_PULPITToPULPIT?: boolean | PULPIT$TEACHER_TEACHER_PULPITToPULPITArgs<ExtArgs>
    _count?: boolean | PULPITCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PULPITPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PULPIT"
    objects: {
      FACULTY_PULPIT_FACULTYToFACULTY: Prisma.$FACULTYPayload<ExtArgs>
      SUBJECT_SUBJECT_PULPITToPULPIT: Prisma.$SUBJECTPayload<ExtArgs>[]
      TEACHER_TEACHER_PULPITToPULPIT: Prisma.$TEACHERPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      PULPIT: string
      PULPIT_NAME: string | null
      FACULTY: string
    }, ExtArgs["result"]["pULPIT"]>
    composites: {}
  }


  type PULPITGetPayload<S extends boolean | null | undefined | PULPITDefaultArgs> = $Result.GetResult<Prisma.$PULPITPayload, S>

  type PULPITCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PULPITFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PULPITCountAggregateInputType | true
    }

  export interface PULPITDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PULPIT'], meta: { name: 'PULPIT' } }
    /**
     * Find zero or one PULPIT that matches the filter.
     * @param {PULPITFindUniqueArgs} args - Arguments to find a PULPIT
     * @example
     * // Get one PULPIT
     * const pULPIT = await prisma.pULPIT.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PULPITFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PULPITFindUniqueArgs<ExtArgs>>
    ): Prisma__PULPITClient<$Result.GetResult<Prisma.$PULPITPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PULPIT that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PULPITFindUniqueOrThrowArgs} args - Arguments to find a PULPIT
     * @example
     * // Get one PULPIT
     * const pULPIT = await prisma.pULPIT.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PULPITFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PULPITFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PULPITClient<$Result.GetResult<Prisma.$PULPITPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PULPIT that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PULPITFindFirstArgs} args - Arguments to find a PULPIT
     * @example
     * // Get one PULPIT
     * const pULPIT = await prisma.pULPIT.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PULPITFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PULPITFindFirstArgs<ExtArgs>>
    ): Prisma__PULPITClient<$Result.GetResult<Prisma.$PULPITPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PULPIT that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PULPITFindFirstOrThrowArgs} args - Arguments to find a PULPIT
     * @example
     * // Get one PULPIT
     * const pULPIT = await prisma.pULPIT.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PULPITFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PULPITFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PULPITClient<$Result.GetResult<Prisma.$PULPITPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PULPITS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PULPITFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PULPITS
     * const pULPITS = await prisma.pULPIT.findMany()
     * 
     * // Get first 10 PULPITS
     * const pULPITS = await prisma.pULPIT.findMany({ take: 10 })
     * 
     * // Only select the `PULPIT`
     * const pULPITWithPULPITOnly = await prisma.pULPIT.findMany({ select: { PULPIT: true } })
     * 
    **/
    findMany<T extends PULPITFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PULPITFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PULPITPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PULPIT.
     * @param {PULPITCreateArgs} args - Arguments to create a PULPIT.
     * @example
     * // Create one PULPIT
     * const PULPIT = await prisma.pULPIT.create({
     *   data: {
     *     // ... data to create a PULPIT
     *   }
     * })
     * 
    **/
    create<T extends PULPITCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PULPITCreateArgs<ExtArgs>>
    ): Prisma__PULPITClient<$Result.GetResult<Prisma.$PULPITPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PULPITS.
     *     @param {PULPITCreateManyArgs} args - Arguments to create many PULPITS.
     *     @example
     *     // Create many PULPITS
     *     const pULPIT = await prisma.pULPIT.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PULPITCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PULPITCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PULPIT.
     * @param {PULPITDeleteArgs} args - Arguments to delete one PULPIT.
     * @example
     * // Delete one PULPIT
     * const PULPIT = await prisma.pULPIT.delete({
     *   where: {
     *     // ... filter to delete one PULPIT
     *   }
     * })
     * 
    **/
    delete<T extends PULPITDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PULPITDeleteArgs<ExtArgs>>
    ): Prisma__PULPITClient<$Result.GetResult<Prisma.$PULPITPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PULPIT.
     * @param {PULPITUpdateArgs} args - Arguments to update one PULPIT.
     * @example
     * // Update one PULPIT
     * const pULPIT = await prisma.pULPIT.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PULPITUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PULPITUpdateArgs<ExtArgs>>
    ): Prisma__PULPITClient<$Result.GetResult<Prisma.$PULPITPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PULPITS.
     * @param {PULPITDeleteManyArgs} args - Arguments to filter PULPITS to delete.
     * @example
     * // Delete a few PULPITS
     * const { count } = await prisma.pULPIT.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PULPITDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PULPITDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PULPITS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PULPITUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PULPITS
     * const pULPIT = await prisma.pULPIT.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PULPITUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PULPITUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PULPIT.
     * @param {PULPITUpsertArgs} args - Arguments to update or create a PULPIT.
     * @example
     * // Update or create a PULPIT
     * const pULPIT = await prisma.pULPIT.upsert({
     *   create: {
     *     // ... data to create a PULPIT
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PULPIT we want to update
     *   }
     * })
    **/
    upsert<T extends PULPITUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PULPITUpsertArgs<ExtArgs>>
    ): Prisma__PULPITClient<$Result.GetResult<Prisma.$PULPITPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PULPITS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PULPITCountArgs} args - Arguments to filter PULPITS to count.
     * @example
     * // Count the number of PULPITS
     * const count = await prisma.pULPIT.count({
     *   where: {
     *     // ... the filter for the PULPITS we want to count
     *   }
     * })
    **/
    count<T extends PULPITCountArgs>(
      args?: Subset<T, PULPITCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PULPITCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PULPIT.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PULPITAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PULPITAggregateArgs>(args: Subset<T, PULPITAggregateArgs>): Prisma.PrismaPromise<GetPULPITAggregateType<T>>

    /**
     * Group by PULPIT.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PULPITGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PULPITGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PULPITGroupByArgs['orderBy'] }
        : { orderBy?: PULPITGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PULPITGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPULPITGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PULPIT model
   */
  readonly fields: PULPITFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PULPIT.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PULPITClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    FACULTY_PULPIT_FACULTYToFACULTY<T extends FACULTYDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FACULTYDefaultArgs<ExtArgs>>): Prisma__FACULTYClient<$Result.GetResult<Prisma.$FACULTYPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    SUBJECT_SUBJECT_PULPITToPULPIT<T extends PULPIT$SUBJECT_SUBJECT_PULPITToPULPITArgs<ExtArgs> = {}>(args?: Subset<T, PULPIT$SUBJECT_SUBJECT_PULPITToPULPITArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SUBJECTPayload<ExtArgs>, T, 'findMany'> | Null>;

    TEACHER_TEACHER_PULPITToPULPIT<T extends PULPIT$TEACHER_TEACHER_PULPITToPULPITArgs<ExtArgs> = {}>(args?: Subset<T, PULPIT$TEACHER_TEACHER_PULPITToPULPITArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TEACHERPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PULPIT model
   */ 
  interface PULPITFieldRefs {
    readonly PULPIT: FieldRef<"PULPIT", 'String'>
    readonly PULPIT_NAME: FieldRef<"PULPIT", 'String'>
    readonly FACULTY: FieldRef<"PULPIT", 'String'>
  }
    

  // Custom InputTypes

  /**
   * PULPIT findUnique
   */
  export type PULPITFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PULPIT
     */
    select?: PULPITSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PULPITInclude<ExtArgs> | null
    /**
     * Filter, which PULPIT to fetch.
     */
    where: PULPITWhereUniqueInput
  }


  /**
   * PULPIT findUniqueOrThrow
   */
  export type PULPITFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PULPIT
     */
    select?: PULPITSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PULPITInclude<ExtArgs> | null
    /**
     * Filter, which PULPIT to fetch.
     */
    where: PULPITWhereUniqueInput
  }


  /**
   * PULPIT findFirst
   */
  export type PULPITFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PULPIT
     */
    select?: PULPITSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PULPITInclude<ExtArgs> | null
    /**
     * Filter, which PULPIT to fetch.
     */
    where?: PULPITWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PULPITS to fetch.
     */
    orderBy?: PULPITOrderByWithRelationInput | PULPITOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PULPITS.
     */
    cursor?: PULPITWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PULPITS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PULPITS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PULPITS.
     */
    distinct?: PULPITScalarFieldEnum | PULPITScalarFieldEnum[]
  }


  /**
   * PULPIT findFirstOrThrow
   */
  export type PULPITFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PULPIT
     */
    select?: PULPITSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PULPITInclude<ExtArgs> | null
    /**
     * Filter, which PULPIT to fetch.
     */
    where?: PULPITWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PULPITS to fetch.
     */
    orderBy?: PULPITOrderByWithRelationInput | PULPITOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PULPITS.
     */
    cursor?: PULPITWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PULPITS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PULPITS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PULPITS.
     */
    distinct?: PULPITScalarFieldEnum | PULPITScalarFieldEnum[]
  }


  /**
   * PULPIT findMany
   */
  export type PULPITFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PULPIT
     */
    select?: PULPITSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PULPITInclude<ExtArgs> | null
    /**
     * Filter, which PULPITS to fetch.
     */
    where?: PULPITWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PULPITS to fetch.
     */
    orderBy?: PULPITOrderByWithRelationInput | PULPITOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PULPITS.
     */
    cursor?: PULPITWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PULPITS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PULPITS.
     */
    skip?: number
    distinct?: PULPITScalarFieldEnum | PULPITScalarFieldEnum[]
  }


  /**
   * PULPIT create
   */
  export type PULPITCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PULPIT
     */
    select?: PULPITSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PULPITInclude<ExtArgs> | null
    /**
     * The data needed to create a PULPIT.
     */
    data: XOR<PULPITCreateInput, PULPITUncheckedCreateInput>
  }


  /**
   * PULPIT createMany
   */
  export type PULPITCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PULPITS.
     */
    data: PULPITCreateManyInput | PULPITCreateManyInput[]
  }


  /**
   * PULPIT update
   */
  export type PULPITUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PULPIT
     */
    select?: PULPITSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PULPITInclude<ExtArgs> | null
    /**
     * The data needed to update a PULPIT.
     */
    data: XOR<PULPITUpdateInput, PULPITUncheckedUpdateInput>
    /**
     * Choose, which PULPIT to update.
     */
    where: PULPITWhereUniqueInput
  }


  /**
   * PULPIT updateMany
   */
  export type PULPITUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PULPITS.
     */
    data: XOR<PULPITUpdateManyMutationInput, PULPITUncheckedUpdateManyInput>
    /**
     * Filter which PULPITS to update
     */
    where?: PULPITWhereInput
  }


  /**
   * PULPIT upsert
   */
  export type PULPITUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PULPIT
     */
    select?: PULPITSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PULPITInclude<ExtArgs> | null
    /**
     * The filter to search for the PULPIT to update in case it exists.
     */
    where: PULPITWhereUniqueInput
    /**
     * In case the PULPIT found by the `where` argument doesn't exist, create a new PULPIT with this data.
     */
    create: XOR<PULPITCreateInput, PULPITUncheckedCreateInput>
    /**
     * In case the PULPIT was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PULPITUpdateInput, PULPITUncheckedUpdateInput>
  }


  /**
   * PULPIT delete
   */
  export type PULPITDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PULPIT
     */
    select?: PULPITSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PULPITInclude<ExtArgs> | null
    /**
     * Filter which PULPIT to delete.
     */
    where: PULPITWhereUniqueInput
  }


  /**
   * PULPIT deleteMany
   */
  export type PULPITDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PULPITS to delete
     */
    where?: PULPITWhereInput
  }


  /**
   * PULPIT.SUBJECT_SUBJECT_PULPITToPULPIT
   */
  export type PULPIT$SUBJECT_SUBJECT_PULPITToPULPITArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SUBJECT
     */
    select?: SUBJECTSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SUBJECTInclude<ExtArgs> | null
    where?: SUBJECTWhereInput
    orderBy?: SUBJECTOrderByWithRelationInput | SUBJECTOrderByWithRelationInput[]
    cursor?: SUBJECTWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SUBJECTScalarFieldEnum | SUBJECTScalarFieldEnum[]
  }


  /**
   * PULPIT.TEACHER_TEACHER_PULPITToPULPIT
   */
  export type PULPIT$TEACHER_TEACHER_PULPITToPULPITArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TEACHER
     */
    select?: TEACHERSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TEACHERInclude<ExtArgs> | null
    where?: TEACHERWhereInput
    orderBy?: TEACHEROrderByWithRelationInput | TEACHEROrderByWithRelationInput[]
    cursor?: TEACHERWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TEACHERScalarFieldEnum | TEACHERScalarFieldEnum[]
  }


  /**
   * PULPIT without action
   */
  export type PULPITDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PULPIT
     */
    select?: PULPITSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PULPITInclude<ExtArgs> | null
  }



  /**
   * Model SUBJECT
   */

  export type AggregateSUBJECT = {
    _count: SUBJECTCountAggregateOutputType | null
    _min: SUBJECTMinAggregateOutputType | null
    _max: SUBJECTMaxAggregateOutputType | null
  }

  export type SUBJECTMinAggregateOutputType = {
    SUBJECT: string | null
    SUBJECT_NAME: string | null
    PULPIT: string | null
  }

  export type SUBJECTMaxAggregateOutputType = {
    SUBJECT: string | null
    SUBJECT_NAME: string | null
    PULPIT: string | null
  }

  export type SUBJECTCountAggregateOutputType = {
    SUBJECT: number
    SUBJECT_NAME: number
    PULPIT: number
    _all: number
  }


  export type SUBJECTMinAggregateInputType = {
    SUBJECT?: true
    SUBJECT_NAME?: true
    PULPIT?: true
  }

  export type SUBJECTMaxAggregateInputType = {
    SUBJECT?: true
    SUBJECT_NAME?: true
    PULPIT?: true
  }

  export type SUBJECTCountAggregateInputType = {
    SUBJECT?: true
    SUBJECT_NAME?: true
    PULPIT?: true
    _all?: true
  }

  export type SUBJECTAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SUBJECT to aggregate.
     */
    where?: SUBJECTWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SUBJECTS to fetch.
     */
    orderBy?: SUBJECTOrderByWithRelationInput | SUBJECTOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SUBJECTWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SUBJECTS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SUBJECTS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SUBJECTS
    **/
    _count?: true | SUBJECTCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SUBJECTMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SUBJECTMaxAggregateInputType
  }

  export type GetSUBJECTAggregateType<T extends SUBJECTAggregateArgs> = {
        [P in keyof T & keyof AggregateSUBJECT]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSUBJECT[P]>
      : GetScalarType<T[P], AggregateSUBJECT[P]>
  }




  export type SUBJECTGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SUBJECTWhereInput
    orderBy?: SUBJECTOrderByWithAggregationInput | SUBJECTOrderByWithAggregationInput[]
    by: SUBJECTScalarFieldEnum[] | SUBJECTScalarFieldEnum
    having?: SUBJECTScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SUBJECTCountAggregateInputType | true
    _min?: SUBJECTMinAggregateInputType
    _max?: SUBJECTMaxAggregateInputType
  }

  export type SUBJECTGroupByOutputType = {
    SUBJECT: string
    SUBJECT_NAME: string
    PULPIT: string
    _count: SUBJECTCountAggregateOutputType | null
    _min: SUBJECTMinAggregateOutputType | null
    _max: SUBJECTMaxAggregateOutputType | null
  }

  type GetSUBJECTGroupByPayload<T extends SUBJECTGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SUBJECTGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SUBJECTGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SUBJECTGroupByOutputType[P]>
            : GetScalarType<T[P], SUBJECTGroupByOutputType[P]>
        }
      >
    >


  export type SUBJECTSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    SUBJECT?: boolean
    SUBJECT_NAME?: boolean
    PULPIT?: boolean
    PULPIT_SUBJECT_PULPITToPULPIT?: boolean | PULPITDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sUBJECT"]>

  export type SUBJECTSelectScalar = {
    SUBJECT?: boolean
    SUBJECT_NAME?: boolean
    PULPIT?: boolean
  }

  export type SUBJECTInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    PULPIT_SUBJECT_PULPITToPULPIT?: boolean | PULPITDefaultArgs<ExtArgs>
  }


  export type $SUBJECTPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SUBJECT"
    objects: {
      PULPIT_SUBJECT_PULPITToPULPIT: Prisma.$PULPITPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      SUBJECT: string
      SUBJECT_NAME: string
      PULPIT: string
    }, ExtArgs["result"]["sUBJECT"]>
    composites: {}
  }


  type SUBJECTGetPayload<S extends boolean | null | undefined | SUBJECTDefaultArgs> = $Result.GetResult<Prisma.$SUBJECTPayload, S>

  type SUBJECTCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SUBJECTFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SUBJECTCountAggregateInputType | true
    }

  export interface SUBJECTDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SUBJECT'], meta: { name: 'SUBJECT' } }
    /**
     * Find zero or one SUBJECT that matches the filter.
     * @param {SUBJECTFindUniqueArgs} args - Arguments to find a SUBJECT
     * @example
     * // Get one SUBJECT
     * const sUBJECT = await prisma.sUBJECT.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SUBJECTFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SUBJECTFindUniqueArgs<ExtArgs>>
    ): Prisma__SUBJECTClient<$Result.GetResult<Prisma.$SUBJECTPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SUBJECT that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SUBJECTFindUniqueOrThrowArgs} args - Arguments to find a SUBJECT
     * @example
     * // Get one SUBJECT
     * const sUBJECT = await prisma.sUBJECT.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SUBJECTFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SUBJECTFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SUBJECTClient<$Result.GetResult<Prisma.$SUBJECTPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SUBJECT that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SUBJECTFindFirstArgs} args - Arguments to find a SUBJECT
     * @example
     * // Get one SUBJECT
     * const sUBJECT = await prisma.sUBJECT.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SUBJECTFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SUBJECTFindFirstArgs<ExtArgs>>
    ): Prisma__SUBJECTClient<$Result.GetResult<Prisma.$SUBJECTPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SUBJECT that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SUBJECTFindFirstOrThrowArgs} args - Arguments to find a SUBJECT
     * @example
     * // Get one SUBJECT
     * const sUBJECT = await prisma.sUBJECT.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SUBJECTFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SUBJECTFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SUBJECTClient<$Result.GetResult<Prisma.$SUBJECTPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SUBJECTS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SUBJECTFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SUBJECTS
     * const sUBJECTS = await prisma.sUBJECT.findMany()
     * 
     * // Get first 10 SUBJECTS
     * const sUBJECTS = await prisma.sUBJECT.findMany({ take: 10 })
     * 
     * // Only select the `SUBJECT`
     * const sUBJECTWithSUBJECTOnly = await prisma.sUBJECT.findMany({ select: { SUBJECT: true } })
     * 
    **/
    findMany<T extends SUBJECTFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SUBJECTFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SUBJECTPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SUBJECT.
     * @param {SUBJECTCreateArgs} args - Arguments to create a SUBJECT.
     * @example
     * // Create one SUBJECT
     * const SUBJECT = await prisma.sUBJECT.create({
     *   data: {
     *     // ... data to create a SUBJECT
     *   }
     * })
     * 
    **/
    create<T extends SUBJECTCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SUBJECTCreateArgs<ExtArgs>>
    ): Prisma__SUBJECTClient<$Result.GetResult<Prisma.$SUBJECTPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many SUBJECTS.
     *     @param {SUBJECTCreateManyArgs} args - Arguments to create many SUBJECTS.
     *     @example
     *     // Create many SUBJECTS
     *     const sUBJECT = await prisma.sUBJECT.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SUBJECTCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SUBJECTCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SUBJECT.
     * @param {SUBJECTDeleteArgs} args - Arguments to delete one SUBJECT.
     * @example
     * // Delete one SUBJECT
     * const SUBJECT = await prisma.sUBJECT.delete({
     *   where: {
     *     // ... filter to delete one SUBJECT
     *   }
     * })
     * 
    **/
    delete<T extends SUBJECTDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SUBJECTDeleteArgs<ExtArgs>>
    ): Prisma__SUBJECTClient<$Result.GetResult<Prisma.$SUBJECTPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SUBJECT.
     * @param {SUBJECTUpdateArgs} args - Arguments to update one SUBJECT.
     * @example
     * // Update one SUBJECT
     * const sUBJECT = await prisma.sUBJECT.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SUBJECTUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SUBJECTUpdateArgs<ExtArgs>>
    ): Prisma__SUBJECTClient<$Result.GetResult<Prisma.$SUBJECTPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SUBJECTS.
     * @param {SUBJECTDeleteManyArgs} args - Arguments to filter SUBJECTS to delete.
     * @example
     * // Delete a few SUBJECTS
     * const { count } = await prisma.sUBJECT.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SUBJECTDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SUBJECTDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SUBJECTS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SUBJECTUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SUBJECTS
     * const sUBJECT = await prisma.sUBJECT.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SUBJECTUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SUBJECTUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SUBJECT.
     * @param {SUBJECTUpsertArgs} args - Arguments to update or create a SUBJECT.
     * @example
     * // Update or create a SUBJECT
     * const sUBJECT = await prisma.sUBJECT.upsert({
     *   create: {
     *     // ... data to create a SUBJECT
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SUBJECT we want to update
     *   }
     * })
    **/
    upsert<T extends SUBJECTUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SUBJECTUpsertArgs<ExtArgs>>
    ): Prisma__SUBJECTClient<$Result.GetResult<Prisma.$SUBJECTPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of SUBJECTS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SUBJECTCountArgs} args - Arguments to filter SUBJECTS to count.
     * @example
     * // Count the number of SUBJECTS
     * const count = await prisma.sUBJECT.count({
     *   where: {
     *     // ... the filter for the SUBJECTS we want to count
     *   }
     * })
    **/
    count<T extends SUBJECTCountArgs>(
      args?: Subset<T, SUBJECTCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SUBJECTCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SUBJECT.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SUBJECTAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SUBJECTAggregateArgs>(args: Subset<T, SUBJECTAggregateArgs>): Prisma.PrismaPromise<GetSUBJECTAggregateType<T>>

    /**
     * Group by SUBJECT.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SUBJECTGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SUBJECTGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SUBJECTGroupByArgs['orderBy'] }
        : { orderBy?: SUBJECTGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SUBJECTGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSUBJECTGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SUBJECT model
   */
  readonly fields: SUBJECTFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SUBJECT.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SUBJECTClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    PULPIT_SUBJECT_PULPITToPULPIT<T extends PULPITDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PULPITDefaultArgs<ExtArgs>>): Prisma__PULPITClient<$Result.GetResult<Prisma.$PULPITPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the SUBJECT model
   */ 
  interface SUBJECTFieldRefs {
    readonly SUBJECT: FieldRef<"SUBJECT", 'String'>
    readonly SUBJECT_NAME: FieldRef<"SUBJECT", 'String'>
    readonly PULPIT: FieldRef<"SUBJECT", 'String'>
  }
    

  // Custom InputTypes

  /**
   * SUBJECT findUnique
   */
  export type SUBJECTFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SUBJECT
     */
    select?: SUBJECTSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SUBJECTInclude<ExtArgs> | null
    /**
     * Filter, which SUBJECT to fetch.
     */
    where: SUBJECTWhereUniqueInput
  }


  /**
   * SUBJECT findUniqueOrThrow
   */
  export type SUBJECTFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SUBJECT
     */
    select?: SUBJECTSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SUBJECTInclude<ExtArgs> | null
    /**
     * Filter, which SUBJECT to fetch.
     */
    where: SUBJECTWhereUniqueInput
  }


  /**
   * SUBJECT findFirst
   */
  export type SUBJECTFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SUBJECT
     */
    select?: SUBJECTSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SUBJECTInclude<ExtArgs> | null
    /**
     * Filter, which SUBJECT to fetch.
     */
    where?: SUBJECTWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SUBJECTS to fetch.
     */
    orderBy?: SUBJECTOrderByWithRelationInput | SUBJECTOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SUBJECTS.
     */
    cursor?: SUBJECTWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SUBJECTS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SUBJECTS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SUBJECTS.
     */
    distinct?: SUBJECTScalarFieldEnum | SUBJECTScalarFieldEnum[]
  }


  /**
   * SUBJECT findFirstOrThrow
   */
  export type SUBJECTFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SUBJECT
     */
    select?: SUBJECTSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SUBJECTInclude<ExtArgs> | null
    /**
     * Filter, which SUBJECT to fetch.
     */
    where?: SUBJECTWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SUBJECTS to fetch.
     */
    orderBy?: SUBJECTOrderByWithRelationInput | SUBJECTOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SUBJECTS.
     */
    cursor?: SUBJECTWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SUBJECTS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SUBJECTS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SUBJECTS.
     */
    distinct?: SUBJECTScalarFieldEnum | SUBJECTScalarFieldEnum[]
  }


  /**
   * SUBJECT findMany
   */
  export type SUBJECTFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SUBJECT
     */
    select?: SUBJECTSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SUBJECTInclude<ExtArgs> | null
    /**
     * Filter, which SUBJECTS to fetch.
     */
    where?: SUBJECTWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SUBJECTS to fetch.
     */
    orderBy?: SUBJECTOrderByWithRelationInput | SUBJECTOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SUBJECTS.
     */
    cursor?: SUBJECTWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SUBJECTS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SUBJECTS.
     */
    skip?: number
    distinct?: SUBJECTScalarFieldEnum | SUBJECTScalarFieldEnum[]
  }


  /**
   * SUBJECT create
   */
  export type SUBJECTCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SUBJECT
     */
    select?: SUBJECTSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SUBJECTInclude<ExtArgs> | null
    /**
     * The data needed to create a SUBJECT.
     */
    data: XOR<SUBJECTCreateInput, SUBJECTUncheckedCreateInput>
  }


  /**
   * SUBJECT createMany
   */
  export type SUBJECTCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SUBJECTS.
     */
    data: SUBJECTCreateManyInput | SUBJECTCreateManyInput[]
  }


  /**
   * SUBJECT update
   */
  export type SUBJECTUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SUBJECT
     */
    select?: SUBJECTSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SUBJECTInclude<ExtArgs> | null
    /**
     * The data needed to update a SUBJECT.
     */
    data: XOR<SUBJECTUpdateInput, SUBJECTUncheckedUpdateInput>
    /**
     * Choose, which SUBJECT to update.
     */
    where: SUBJECTWhereUniqueInput
  }


  /**
   * SUBJECT updateMany
   */
  export type SUBJECTUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SUBJECTS.
     */
    data: XOR<SUBJECTUpdateManyMutationInput, SUBJECTUncheckedUpdateManyInput>
    /**
     * Filter which SUBJECTS to update
     */
    where?: SUBJECTWhereInput
  }


  /**
   * SUBJECT upsert
   */
  export type SUBJECTUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SUBJECT
     */
    select?: SUBJECTSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SUBJECTInclude<ExtArgs> | null
    /**
     * The filter to search for the SUBJECT to update in case it exists.
     */
    where: SUBJECTWhereUniqueInput
    /**
     * In case the SUBJECT found by the `where` argument doesn't exist, create a new SUBJECT with this data.
     */
    create: XOR<SUBJECTCreateInput, SUBJECTUncheckedCreateInput>
    /**
     * In case the SUBJECT was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SUBJECTUpdateInput, SUBJECTUncheckedUpdateInput>
  }


  /**
   * SUBJECT delete
   */
  export type SUBJECTDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SUBJECT
     */
    select?: SUBJECTSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SUBJECTInclude<ExtArgs> | null
    /**
     * Filter which SUBJECT to delete.
     */
    where: SUBJECTWhereUniqueInput
  }


  /**
   * SUBJECT deleteMany
   */
  export type SUBJECTDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SUBJECTS to delete
     */
    where?: SUBJECTWhereInput
  }


  /**
   * SUBJECT without action
   */
  export type SUBJECTDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SUBJECT
     */
    select?: SUBJECTSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SUBJECTInclude<ExtArgs> | null
  }



  /**
   * Model TEACHER
   */

  export type AggregateTEACHER = {
    _count: TEACHERCountAggregateOutputType | null
    _min: TEACHERMinAggregateOutputType | null
    _max: TEACHERMaxAggregateOutputType | null
  }

  export type TEACHERMinAggregateOutputType = {
    TEACHER: string | null
    TEACHER_NAME: string | null
    PULPIT: string | null
  }

  export type TEACHERMaxAggregateOutputType = {
    TEACHER: string | null
    TEACHER_NAME: string | null
    PULPIT: string | null
  }

  export type TEACHERCountAggregateOutputType = {
    TEACHER: number
    TEACHER_NAME: number
    PULPIT: number
    _all: number
  }


  export type TEACHERMinAggregateInputType = {
    TEACHER?: true
    TEACHER_NAME?: true
    PULPIT?: true
  }

  export type TEACHERMaxAggregateInputType = {
    TEACHER?: true
    TEACHER_NAME?: true
    PULPIT?: true
  }

  export type TEACHERCountAggregateInputType = {
    TEACHER?: true
    TEACHER_NAME?: true
    PULPIT?: true
    _all?: true
  }

  export type TEACHERAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TEACHER to aggregate.
     */
    where?: TEACHERWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TEACHERS to fetch.
     */
    orderBy?: TEACHEROrderByWithRelationInput | TEACHEROrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TEACHERWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TEACHERS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TEACHERS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TEACHERS
    **/
    _count?: true | TEACHERCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TEACHERMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TEACHERMaxAggregateInputType
  }

  export type GetTEACHERAggregateType<T extends TEACHERAggregateArgs> = {
        [P in keyof T & keyof AggregateTEACHER]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTEACHER[P]>
      : GetScalarType<T[P], AggregateTEACHER[P]>
  }




  export type TEACHERGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TEACHERWhereInput
    orderBy?: TEACHEROrderByWithAggregationInput | TEACHEROrderByWithAggregationInput[]
    by: TEACHERScalarFieldEnum[] | TEACHERScalarFieldEnum
    having?: TEACHERScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TEACHERCountAggregateInputType | true
    _min?: TEACHERMinAggregateInputType
    _max?: TEACHERMaxAggregateInputType
  }

  export type TEACHERGroupByOutputType = {
    TEACHER: string
    TEACHER_NAME: string | null
    PULPIT: string
    _count: TEACHERCountAggregateOutputType | null
    _min: TEACHERMinAggregateOutputType | null
    _max: TEACHERMaxAggregateOutputType | null
  }

  type GetTEACHERGroupByPayload<T extends TEACHERGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TEACHERGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TEACHERGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TEACHERGroupByOutputType[P]>
            : GetScalarType<T[P], TEACHERGroupByOutputType[P]>
        }
      >
    >


  export type TEACHERSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    TEACHER?: boolean
    TEACHER_NAME?: boolean
    PULPIT?: boolean
    PULPIT_TEACHER_PULPITToPULPIT?: boolean | PULPITDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tEACHER"]>

  export type TEACHERSelectScalar = {
    TEACHER?: boolean
    TEACHER_NAME?: boolean
    PULPIT?: boolean
  }

  export type TEACHERInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    PULPIT_TEACHER_PULPITToPULPIT?: boolean | PULPITDefaultArgs<ExtArgs>
  }


  export type $TEACHERPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TEACHER"
    objects: {
      PULPIT_TEACHER_PULPITToPULPIT: Prisma.$PULPITPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      TEACHER: string
      TEACHER_NAME: string | null
      PULPIT: string
    }, ExtArgs["result"]["tEACHER"]>
    composites: {}
  }


  type TEACHERGetPayload<S extends boolean | null | undefined | TEACHERDefaultArgs> = $Result.GetResult<Prisma.$TEACHERPayload, S>

  type TEACHERCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TEACHERFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TEACHERCountAggregateInputType | true
    }

  export interface TEACHERDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TEACHER'], meta: { name: 'TEACHER' } }
    /**
     * Find zero or one TEACHER that matches the filter.
     * @param {TEACHERFindUniqueArgs} args - Arguments to find a TEACHER
     * @example
     * // Get one TEACHER
     * const tEACHER = await prisma.tEACHER.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TEACHERFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TEACHERFindUniqueArgs<ExtArgs>>
    ): Prisma__TEACHERClient<$Result.GetResult<Prisma.$TEACHERPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one TEACHER that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TEACHERFindUniqueOrThrowArgs} args - Arguments to find a TEACHER
     * @example
     * // Get one TEACHER
     * const tEACHER = await prisma.tEACHER.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TEACHERFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TEACHERFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TEACHERClient<$Result.GetResult<Prisma.$TEACHERPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first TEACHER that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TEACHERFindFirstArgs} args - Arguments to find a TEACHER
     * @example
     * // Get one TEACHER
     * const tEACHER = await prisma.tEACHER.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TEACHERFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TEACHERFindFirstArgs<ExtArgs>>
    ): Prisma__TEACHERClient<$Result.GetResult<Prisma.$TEACHERPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first TEACHER that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TEACHERFindFirstOrThrowArgs} args - Arguments to find a TEACHER
     * @example
     * // Get one TEACHER
     * const tEACHER = await prisma.tEACHER.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TEACHERFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TEACHERFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TEACHERClient<$Result.GetResult<Prisma.$TEACHERPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more TEACHERS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TEACHERFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TEACHERS
     * const tEACHERS = await prisma.tEACHER.findMany()
     * 
     * // Get first 10 TEACHERS
     * const tEACHERS = await prisma.tEACHER.findMany({ take: 10 })
     * 
     * // Only select the `TEACHER`
     * const tEACHERWithTEACHEROnly = await prisma.tEACHER.findMany({ select: { TEACHER: true } })
     * 
    **/
    findMany<T extends TEACHERFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TEACHERFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TEACHERPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a TEACHER.
     * @param {TEACHERCreateArgs} args - Arguments to create a TEACHER.
     * @example
     * // Create one TEACHER
     * const TEACHER = await prisma.tEACHER.create({
     *   data: {
     *     // ... data to create a TEACHER
     *   }
     * })
     * 
    **/
    create<T extends TEACHERCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TEACHERCreateArgs<ExtArgs>>
    ): Prisma__TEACHERClient<$Result.GetResult<Prisma.$TEACHERPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many TEACHERS.
     *     @param {TEACHERCreateManyArgs} args - Arguments to create many TEACHERS.
     *     @example
     *     // Create many TEACHERS
     *     const tEACHER = await prisma.tEACHER.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TEACHERCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TEACHERCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TEACHER.
     * @param {TEACHERDeleteArgs} args - Arguments to delete one TEACHER.
     * @example
     * // Delete one TEACHER
     * const TEACHER = await prisma.tEACHER.delete({
     *   where: {
     *     // ... filter to delete one TEACHER
     *   }
     * })
     * 
    **/
    delete<T extends TEACHERDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TEACHERDeleteArgs<ExtArgs>>
    ): Prisma__TEACHERClient<$Result.GetResult<Prisma.$TEACHERPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one TEACHER.
     * @param {TEACHERUpdateArgs} args - Arguments to update one TEACHER.
     * @example
     * // Update one TEACHER
     * const tEACHER = await prisma.tEACHER.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TEACHERUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TEACHERUpdateArgs<ExtArgs>>
    ): Prisma__TEACHERClient<$Result.GetResult<Prisma.$TEACHERPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more TEACHERS.
     * @param {TEACHERDeleteManyArgs} args - Arguments to filter TEACHERS to delete.
     * @example
     * // Delete a few TEACHERS
     * const { count } = await prisma.tEACHER.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TEACHERDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TEACHERDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TEACHERS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TEACHERUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TEACHERS
     * const tEACHER = await prisma.tEACHER.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TEACHERUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TEACHERUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TEACHER.
     * @param {TEACHERUpsertArgs} args - Arguments to update or create a TEACHER.
     * @example
     * // Update or create a TEACHER
     * const tEACHER = await prisma.tEACHER.upsert({
     *   create: {
     *     // ... data to create a TEACHER
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TEACHER we want to update
     *   }
     * })
    **/
    upsert<T extends TEACHERUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TEACHERUpsertArgs<ExtArgs>>
    ): Prisma__TEACHERClient<$Result.GetResult<Prisma.$TEACHERPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of TEACHERS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TEACHERCountArgs} args - Arguments to filter TEACHERS to count.
     * @example
     * // Count the number of TEACHERS
     * const count = await prisma.tEACHER.count({
     *   where: {
     *     // ... the filter for the TEACHERS we want to count
     *   }
     * })
    **/
    count<T extends TEACHERCountArgs>(
      args?: Subset<T, TEACHERCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TEACHERCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TEACHER.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TEACHERAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TEACHERAggregateArgs>(args: Subset<T, TEACHERAggregateArgs>): Prisma.PrismaPromise<GetTEACHERAggregateType<T>>

    /**
     * Group by TEACHER.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TEACHERGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TEACHERGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TEACHERGroupByArgs['orderBy'] }
        : { orderBy?: TEACHERGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TEACHERGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTEACHERGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TEACHER model
   */
  readonly fields: TEACHERFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TEACHER.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TEACHERClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    PULPIT_TEACHER_PULPITToPULPIT<T extends PULPITDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PULPITDefaultArgs<ExtArgs>>): Prisma__PULPITClient<$Result.GetResult<Prisma.$PULPITPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the TEACHER model
   */ 
  interface TEACHERFieldRefs {
    readonly TEACHER: FieldRef<"TEACHER", 'String'>
    readonly TEACHER_NAME: FieldRef<"TEACHER", 'String'>
    readonly PULPIT: FieldRef<"TEACHER", 'String'>
  }
    

  // Custom InputTypes

  /**
   * TEACHER findUnique
   */
  export type TEACHERFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TEACHER
     */
    select?: TEACHERSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TEACHERInclude<ExtArgs> | null
    /**
     * Filter, which TEACHER to fetch.
     */
    where: TEACHERWhereUniqueInput
  }


  /**
   * TEACHER findUniqueOrThrow
   */
  export type TEACHERFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TEACHER
     */
    select?: TEACHERSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TEACHERInclude<ExtArgs> | null
    /**
     * Filter, which TEACHER to fetch.
     */
    where: TEACHERWhereUniqueInput
  }


  /**
   * TEACHER findFirst
   */
  export type TEACHERFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TEACHER
     */
    select?: TEACHERSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TEACHERInclude<ExtArgs> | null
    /**
     * Filter, which TEACHER to fetch.
     */
    where?: TEACHERWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TEACHERS to fetch.
     */
    orderBy?: TEACHEROrderByWithRelationInput | TEACHEROrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TEACHERS.
     */
    cursor?: TEACHERWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TEACHERS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TEACHERS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TEACHERS.
     */
    distinct?: TEACHERScalarFieldEnum | TEACHERScalarFieldEnum[]
  }


  /**
   * TEACHER findFirstOrThrow
   */
  export type TEACHERFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TEACHER
     */
    select?: TEACHERSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TEACHERInclude<ExtArgs> | null
    /**
     * Filter, which TEACHER to fetch.
     */
    where?: TEACHERWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TEACHERS to fetch.
     */
    orderBy?: TEACHEROrderByWithRelationInput | TEACHEROrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TEACHERS.
     */
    cursor?: TEACHERWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TEACHERS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TEACHERS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TEACHERS.
     */
    distinct?: TEACHERScalarFieldEnum | TEACHERScalarFieldEnum[]
  }


  /**
   * TEACHER findMany
   */
  export type TEACHERFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TEACHER
     */
    select?: TEACHERSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TEACHERInclude<ExtArgs> | null
    /**
     * Filter, which TEACHERS to fetch.
     */
    where?: TEACHERWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TEACHERS to fetch.
     */
    orderBy?: TEACHEROrderByWithRelationInput | TEACHEROrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TEACHERS.
     */
    cursor?: TEACHERWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TEACHERS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TEACHERS.
     */
    skip?: number
    distinct?: TEACHERScalarFieldEnum | TEACHERScalarFieldEnum[]
  }


  /**
   * TEACHER create
   */
  export type TEACHERCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TEACHER
     */
    select?: TEACHERSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TEACHERInclude<ExtArgs> | null
    /**
     * The data needed to create a TEACHER.
     */
    data: XOR<TEACHERCreateInput, TEACHERUncheckedCreateInput>
  }


  /**
   * TEACHER createMany
   */
  export type TEACHERCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TEACHERS.
     */
    data: TEACHERCreateManyInput | TEACHERCreateManyInput[]
  }


  /**
   * TEACHER update
   */
  export type TEACHERUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TEACHER
     */
    select?: TEACHERSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TEACHERInclude<ExtArgs> | null
    /**
     * The data needed to update a TEACHER.
     */
    data: XOR<TEACHERUpdateInput, TEACHERUncheckedUpdateInput>
    /**
     * Choose, which TEACHER to update.
     */
    where: TEACHERWhereUniqueInput
  }


  /**
   * TEACHER updateMany
   */
  export type TEACHERUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TEACHERS.
     */
    data: XOR<TEACHERUpdateManyMutationInput, TEACHERUncheckedUpdateManyInput>
    /**
     * Filter which TEACHERS to update
     */
    where?: TEACHERWhereInput
  }


  /**
   * TEACHER upsert
   */
  export type TEACHERUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TEACHER
     */
    select?: TEACHERSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TEACHERInclude<ExtArgs> | null
    /**
     * The filter to search for the TEACHER to update in case it exists.
     */
    where: TEACHERWhereUniqueInput
    /**
     * In case the TEACHER found by the `where` argument doesn't exist, create a new TEACHER with this data.
     */
    create: XOR<TEACHERCreateInput, TEACHERUncheckedCreateInput>
    /**
     * In case the TEACHER was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TEACHERUpdateInput, TEACHERUncheckedUpdateInput>
  }


  /**
   * TEACHER delete
   */
  export type TEACHERDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TEACHER
     */
    select?: TEACHERSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TEACHERInclude<ExtArgs> | null
    /**
     * Filter which TEACHER to delete.
     */
    where: TEACHERWhereUniqueInput
  }


  /**
   * TEACHER deleteMany
   */
  export type TEACHERDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TEACHERS to delete
     */
    where?: TEACHERWhereInput
  }


  /**
   * TEACHER without action
   */
  export type TEACHERDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TEACHER
     */
    select?: TEACHERSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TEACHERInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable',
    Snapshot: 'Snapshot'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AUDITORIUMScalarFieldEnum: {
    AUDITORIUM: 'AUDITORIUM',
    AUDITORIUM_NAME: 'AUDITORIUM_NAME',
    AUDITORIUM_CAPACITY: 'AUDITORIUM_CAPACITY',
    AUDITORIUM_TYPE: 'AUDITORIUM_TYPE'
  };

  export type AUDITORIUMScalarFieldEnum = (typeof AUDITORIUMScalarFieldEnum)[keyof typeof AUDITORIUMScalarFieldEnum]


  export const AUDITORIUM_TYPEScalarFieldEnum: {
    AUDITORIUM_TYPE: 'AUDITORIUM_TYPE',
    AUDITORIUM_TYPENAME: 'AUDITORIUM_TYPENAME'
  };

  export type AUDITORIUM_TYPEScalarFieldEnum = (typeof AUDITORIUM_TYPEScalarFieldEnum)[keyof typeof AUDITORIUM_TYPEScalarFieldEnum]


  export const FACULTYScalarFieldEnum: {
    FACULTY: 'FACULTY',
    FACULTY_NAME: 'FACULTY_NAME'
  };

  export type FACULTYScalarFieldEnum = (typeof FACULTYScalarFieldEnum)[keyof typeof FACULTYScalarFieldEnum]


  export const PULPITScalarFieldEnum: {
    PULPIT: 'PULPIT',
    PULPIT_NAME: 'PULPIT_NAME',
    FACULTY: 'FACULTY'
  };

  export type PULPITScalarFieldEnum = (typeof PULPITScalarFieldEnum)[keyof typeof PULPITScalarFieldEnum]


  export const SUBJECTScalarFieldEnum: {
    SUBJECT: 'SUBJECT',
    SUBJECT_NAME: 'SUBJECT_NAME',
    PULPIT: 'PULPIT'
  };

  export type SUBJECTScalarFieldEnum = (typeof SUBJECTScalarFieldEnum)[keyof typeof SUBJECTScalarFieldEnum]


  export const TEACHERScalarFieldEnum: {
    TEACHER: 'TEACHER',
    TEACHER_NAME: 'TEACHER_NAME',
    PULPIT: 'PULPIT'
  };

  export type TEACHERScalarFieldEnum = (typeof TEACHERScalarFieldEnum)[keyof typeof TEACHERScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type AUDITORIUMWhereInput = {
    AND?: AUDITORIUMWhereInput | AUDITORIUMWhereInput[]
    OR?: AUDITORIUMWhereInput[]
    NOT?: AUDITORIUMWhereInput | AUDITORIUMWhereInput[]
    AUDITORIUM?: StringFilter<"AUDITORIUM"> | string
    AUDITORIUM_NAME?: StringNullableFilter<"AUDITORIUM"> | string | null
    AUDITORIUM_CAPACITY?: IntNullableFilter<"AUDITORIUM"> | number | null
    AUDITORIUM_TYPE?: StringFilter<"AUDITORIUM"> | string
    AUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPE?: XOR<AUDITORIUM_TYPERelationFilter, AUDITORIUM_TYPEWhereInput>
  }

  export type AUDITORIUMOrderByWithRelationInput = {
    AUDITORIUM?: SortOrder
    AUDITORIUM_NAME?: SortOrderInput | SortOrder
    AUDITORIUM_CAPACITY?: SortOrderInput | SortOrder
    AUDITORIUM_TYPE?: SortOrder
    AUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPE?: AUDITORIUM_TYPEOrderByWithRelationInput
  }

  export type AUDITORIUMWhereUniqueInput = Prisma.AtLeast<{
    AUDITORIUM?: string
    AND?: AUDITORIUMWhereInput | AUDITORIUMWhereInput[]
    OR?: AUDITORIUMWhereInput[]
    NOT?: AUDITORIUMWhereInput | AUDITORIUMWhereInput[]
    AUDITORIUM_NAME?: StringNullableFilter<"AUDITORIUM"> | string | null
    AUDITORIUM_CAPACITY?: IntNullableFilter<"AUDITORIUM"> | number | null
    AUDITORIUM_TYPE?: StringFilter<"AUDITORIUM"> | string
    AUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPE?: XOR<AUDITORIUM_TYPERelationFilter, AUDITORIUM_TYPEWhereInput>
  }, "AUDITORIUM">

  export type AUDITORIUMOrderByWithAggregationInput = {
    AUDITORIUM?: SortOrder
    AUDITORIUM_NAME?: SortOrderInput | SortOrder
    AUDITORIUM_CAPACITY?: SortOrderInput | SortOrder
    AUDITORIUM_TYPE?: SortOrder
    _count?: AUDITORIUMCountOrderByAggregateInput
    _avg?: AUDITORIUMAvgOrderByAggregateInput
    _max?: AUDITORIUMMaxOrderByAggregateInput
    _min?: AUDITORIUMMinOrderByAggregateInput
    _sum?: AUDITORIUMSumOrderByAggregateInput
  }

  export type AUDITORIUMScalarWhereWithAggregatesInput = {
    AND?: AUDITORIUMScalarWhereWithAggregatesInput | AUDITORIUMScalarWhereWithAggregatesInput[]
    OR?: AUDITORIUMScalarWhereWithAggregatesInput[]
    NOT?: AUDITORIUMScalarWhereWithAggregatesInput | AUDITORIUMScalarWhereWithAggregatesInput[]
    AUDITORIUM?: StringWithAggregatesFilter<"AUDITORIUM"> | string
    AUDITORIUM_NAME?: StringNullableWithAggregatesFilter<"AUDITORIUM"> | string | null
    AUDITORIUM_CAPACITY?: IntNullableWithAggregatesFilter<"AUDITORIUM"> | number | null
    AUDITORIUM_TYPE?: StringWithAggregatesFilter<"AUDITORIUM"> | string
  }

  export type AUDITORIUM_TYPEWhereInput = {
    AND?: AUDITORIUM_TYPEWhereInput | AUDITORIUM_TYPEWhereInput[]
    OR?: AUDITORIUM_TYPEWhereInput[]
    NOT?: AUDITORIUM_TYPEWhereInput | AUDITORIUM_TYPEWhereInput[]
    AUDITORIUM_TYPE?: StringFilter<"AUDITORIUM_TYPE"> | string
    AUDITORIUM_TYPENAME?: StringFilter<"AUDITORIUM_TYPE"> | string
    AUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPE?: AUDITORIUMListRelationFilter
  }

  export type AUDITORIUM_TYPEOrderByWithRelationInput = {
    AUDITORIUM_TYPE?: SortOrder
    AUDITORIUM_TYPENAME?: SortOrder
    AUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPE?: AUDITORIUMOrderByRelationAggregateInput
  }

  export type AUDITORIUM_TYPEWhereUniqueInput = Prisma.AtLeast<{
    AUDITORIUM_TYPE?: string
    AND?: AUDITORIUM_TYPEWhereInput | AUDITORIUM_TYPEWhereInput[]
    OR?: AUDITORIUM_TYPEWhereInput[]
    NOT?: AUDITORIUM_TYPEWhereInput | AUDITORIUM_TYPEWhereInput[]
    AUDITORIUM_TYPENAME?: StringFilter<"AUDITORIUM_TYPE"> | string
    AUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPE?: AUDITORIUMListRelationFilter
  }, "AUDITORIUM_TYPE">

  export type AUDITORIUM_TYPEOrderByWithAggregationInput = {
    AUDITORIUM_TYPE?: SortOrder
    AUDITORIUM_TYPENAME?: SortOrder
    _count?: AUDITORIUM_TYPECountOrderByAggregateInput
    _max?: AUDITORIUM_TYPEMaxOrderByAggregateInput
    _min?: AUDITORIUM_TYPEMinOrderByAggregateInput
  }

  export type AUDITORIUM_TYPEScalarWhereWithAggregatesInput = {
    AND?: AUDITORIUM_TYPEScalarWhereWithAggregatesInput | AUDITORIUM_TYPEScalarWhereWithAggregatesInput[]
    OR?: AUDITORIUM_TYPEScalarWhereWithAggregatesInput[]
    NOT?: AUDITORIUM_TYPEScalarWhereWithAggregatesInput | AUDITORIUM_TYPEScalarWhereWithAggregatesInput[]
    AUDITORIUM_TYPE?: StringWithAggregatesFilter<"AUDITORIUM_TYPE"> | string
    AUDITORIUM_TYPENAME?: StringWithAggregatesFilter<"AUDITORIUM_TYPE"> | string
  }

  export type FACULTYWhereInput = {
    AND?: FACULTYWhereInput | FACULTYWhereInput[]
    OR?: FACULTYWhereInput[]
    NOT?: FACULTYWhereInput | FACULTYWhereInput[]
    FACULTY?: StringFilter<"FACULTY"> | string
    FACULTY_NAME?: StringFilter<"FACULTY"> | string
    PULPIT_PULPIT_FACULTYToFACULTY?: PULPITListRelationFilter
  }

  export type FACULTYOrderByWithRelationInput = {
    FACULTY?: SortOrder
    FACULTY_NAME?: SortOrder
    PULPIT_PULPIT_FACULTYToFACULTY?: PULPITOrderByRelationAggregateInput
  }

  export type FACULTYWhereUniqueInput = Prisma.AtLeast<{
    FACULTY?: string
    AND?: FACULTYWhereInput | FACULTYWhereInput[]
    OR?: FACULTYWhereInput[]
    NOT?: FACULTYWhereInput | FACULTYWhereInput[]
    FACULTY_NAME?: StringFilter<"FACULTY"> | string
    PULPIT_PULPIT_FACULTYToFACULTY?: PULPITListRelationFilter
  }, "FACULTY">

  export type FACULTYOrderByWithAggregationInput = {
    FACULTY?: SortOrder
    FACULTY_NAME?: SortOrder
    _count?: FACULTYCountOrderByAggregateInput
    _max?: FACULTYMaxOrderByAggregateInput
    _min?: FACULTYMinOrderByAggregateInput
  }

  export type FACULTYScalarWhereWithAggregatesInput = {
    AND?: FACULTYScalarWhereWithAggregatesInput | FACULTYScalarWhereWithAggregatesInput[]
    OR?: FACULTYScalarWhereWithAggregatesInput[]
    NOT?: FACULTYScalarWhereWithAggregatesInput | FACULTYScalarWhereWithAggregatesInput[]
    FACULTY?: StringWithAggregatesFilter<"FACULTY"> | string
    FACULTY_NAME?: StringWithAggregatesFilter<"FACULTY"> | string
  }

  export type PULPITWhereInput = {
    AND?: PULPITWhereInput | PULPITWhereInput[]
    OR?: PULPITWhereInput[]
    NOT?: PULPITWhereInput | PULPITWhereInput[]
    PULPIT?: StringFilter<"PULPIT"> | string
    PULPIT_NAME?: StringNullableFilter<"PULPIT"> | string | null
    FACULTY?: StringFilter<"PULPIT"> | string
    FACULTY_PULPIT_FACULTYToFACULTY?: XOR<FACULTYRelationFilter, FACULTYWhereInput>
    SUBJECT_SUBJECT_PULPITToPULPIT?: SUBJECTListRelationFilter
    TEACHER_TEACHER_PULPITToPULPIT?: TEACHERListRelationFilter
  }

  export type PULPITOrderByWithRelationInput = {
    PULPIT?: SortOrder
    PULPIT_NAME?: SortOrderInput | SortOrder
    FACULTY?: SortOrder
    FACULTY_PULPIT_FACULTYToFACULTY?: FACULTYOrderByWithRelationInput
    SUBJECT_SUBJECT_PULPITToPULPIT?: SUBJECTOrderByRelationAggregateInput
    TEACHER_TEACHER_PULPITToPULPIT?: TEACHEROrderByRelationAggregateInput
  }

  export type PULPITWhereUniqueInput = Prisma.AtLeast<{
    PULPIT?: string
    AND?: PULPITWhereInput | PULPITWhereInput[]
    OR?: PULPITWhereInput[]
    NOT?: PULPITWhereInput | PULPITWhereInput[]
    PULPIT_NAME?: StringNullableFilter<"PULPIT"> | string | null
    FACULTY?: StringFilter<"PULPIT"> | string
    FACULTY_PULPIT_FACULTYToFACULTY?: XOR<FACULTYRelationFilter, FACULTYWhereInput>
    SUBJECT_SUBJECT_PULPITToPULPIT?: SUBJECTListRelationFilter
    TEACHER_TEACHER_PULPITToPULPIT?: TEACHERListRelationFilter
  }, "PULPIT">

  export type PULPITOrderByWithAggregationInput = {
    PULPIT?: SortOrder
    PULPIT_NAME?: SortOrderInput | SortOrder
    FACULTY?: SortOrder
    _count?: PULPITCountOrderByAggregateInput
    _max?: PULPITMaxOrderByAggregateInput
    _min?: PULPITMinOrderByAggregateInput
  }

  export type PULPITScalarWhereWithAggregatesInput = {
    AND?: PULPITScalarWhereWithAggregatesInput | PULPITScalarWhereWithAggregatesInput[]
    OR?: PULPITScalarWhereWithAggregatesInput[]
    NOT?: PULPITScalarWhereWithAggregatesInput | PULPITScalarWhereWithAggregatesInput[]
    PULPIT?: StringWithAggregatesFilter<"PULPIT"> | string
    PULPIT_NAME?: StringNullableWithAggregatesFilter<"PULPIT"> | string | null
    FACULTY?: StringWithAggregatesFilter<"PULPIT"> | string
  }

  export type SUBJECTWhereInput = {
    AND?: SUBJECTWhereInput | SUBJECTWhereInput[]
    OR?: SUBJECTWhereInput[]
    NOT?: SUBJECTWhereInput | SUBJECTWhereInput[]
    SUBJECT?: StringFilter<"SUBJECT"> | string
    SUBJECT_NAME?: StringFilter<"SUBJECT"> | string
    PULPIT?: StringFilter<"SUBJECT"> | string
    PULPIT_SUBJECT_PULPITToPULPIT?: XOR<PULPITRelationFilter, PULPITWhereInput>
  }

  export type SUBJECTOrderByWithRelationInput = {
    SUBJECT?: SortOrder
    SUBJECT_NAME?: SortOrder
    PULPIT?: SortOrder
    PULPIT_SUBJECT_PULPITToPULPIT?: PULPITOrderByWithRelationInput
  }

  export type SUBJECTWhereUniqueInput = Prisma.AtLeast<{
    SUBJECT?: string
    AND?: SUBJECTWhereInput | SUBJECTWhereInput[]
    OR?: SUBJECTWhereInput[]
    NOT?: SUBJECTWhereInput | SUBJECTWhereInput[]
    SUBJECT_NAME?: StringFilter<"SUBJECT"> | string
    PULPIT?: StringFilter<"SUBJECT"> | string
    PULPIT_SUBJECT_PULPITToPULPIT?: XOR<PULPITRelationFilter, PULPITWhereInput>
  }, "SUBJECT">

  export type SUBJECTOrderByWithAggregationInput = {
    SUBJECT?: SortOrder
    SUBJECT_NAME?: SortOrder
    PULPIT?: SortOrder
    _count?: SUBJECTCountOrderByAggregateInput
    _max?: SUBJECTMaxOrderByAggregateInput
    _min?: SUBJECTMinOrderByAggregateInput
  }

  export type SUBJECTScalarWhereWithAggregatesInput = {
    AND?: SUBJECTScalarWhereWithAggregatesInput | SUBJECTScalarWhereWithAggregatesInput[]
    OR?: SUBJECTScalarWhereWithAggregatesInput[]
    NOT?: SUBJECTScalarWhereWithAggregatesInput | SUBJECTScalarWhereWithAggregatesInput[]
    SUBJECT?: StringWithAggregatesFilter<"SUBJECT"> | string
    SUBJECT_NAME?: StringWithAggregatesFilter<"SUBJECT"> | string
    PULPIT?: StringWithAggregatesFilter<"SUBJECT"> | string
  }

  export type TEACHERWhereInput = {
    AND?: TEACHERWhereInput | TEACHERWhereInput[]
    OR?: TEACHERWhereInput[]
    NOT?: TEACHERWhereInput | TEACHERWhereInput[]
    TEACHER?: StringFilter<"TEACHER"> | string
    TEACHER_NAME?: StringNullableFilter<"TEACHER"> | string | null
    PULPIT?: StringFilter<"TEACHER"> | string
    PULPIT_TEACHER_PULPITToPULPIT?: XOR<PULPITRelationFilter, PULPITWhereInput>
  }

  export type TEACHEROrderByWithRelationInput = {
    TEACHER?: SortOrder
    TEACHER_NAME?: SortOrderInput | SortOrder
    PULPIT?: SortOrder
    PULPIT_TEACHER_PULPITToPULPIT?: PULPITOrderByWithRelationInput
  }

  export type TEACHERWhereUniqueInput = Prisma.AtLeast<{
    TEACHER?: string
    AND?: TEACHERWhereInput | TEACHERWhereInput[]
    OR?: TEACHERWhereInput[]
    NOT?: TEACHERWhereInput | TEACHERWhereInput[]
    TEACHER_NAME?: StringNullableFilter<"TEACHER"> | string | null
    PULPIT?: StringFilter<"TEACHER"> | string
    PULPIT_TEACHER_PULPITToPULPIT?: XOR<PULPITRelationFilter, PULPITWhereInput>
  }, "TEACHER">

  export type TEACHEROrderByWithAggregationInput = {
    TEACHER?: SortOrder
    TEACHER_NAME?: SortOrderInput | SortOrder
    PULPIT?: SortOrder
    _count?: TEACHERCountOrderByAggregateInput
    _max?: TEACHERMaxOrderByAggregateInput
    _min?: TEACHERMinOrderByAggregateInput
  }

  export type TEACHERScalarWhereWithAggregatesInput = {
    AND?: TEACHERScalarWhereWithAggregatesInput | TEACHERScalarWhereWithAggregatesInput[]
    OR?: TEACHERScalarWhereWithAggregatesInput[]
    NOT?: TEACHERScalarWhereWithAggregatesInput | TEACHERScalarWhereWithAggregatesInput[]
    TEACHER?: StringWithAggregatesFilter<"TEACHER"> | string
    TEACHER_NAME?: StringNullableWithAggregatesFilter<"TEACHER"> | string | null
    PULPIT?: StringWithAggregatesFilter<"TEACHER"> | string
  }

  export type AUDITORIUMCreateInput = {
    AUDITORIUM: string
    AUDITORIUM_NAME?: string | null
    AUDITORIUM_CAPACITY?: number | null
    AUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPE: AUDITORIUM_TYPECreateNestedOneWithoutAUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput
  }

  export type AUDITORIUMUncheckedCreateInput = {
    AUDITORIUM: string
    AUDITORIUM_NAME?: string | null
    AUDITORIUM_CAPACITY?: number | null
    AUDITORIUM_TYPE: string
  }

  export type AUDITORIUMUpdateInput = {
    AUDITORIUM?: StringFieldUpdateOperationsInput | string
    AUDITORIUM_NAME?: NullableStringFieldUpdateOperationsInput | string | null
    AUDITORIUM_CAPACITY?: NullableIntFieldUpdateOperationsInput | number | null
    AUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPE?: AUDITORIUM_TYPEUpdateOneRequiredWithoutAUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPENestedInput
  }

  export type AUDITORIUMUncheckedUpdateInput = {
    AUDITORIUM?: StringFieldUpdateOperationsInput | string
    AUDITORIUM_NAME?: NullableStringFieldUpdateOperationsInput | string | null
    AUDITORIUM_CAPACITY?: NullableIntFieldUpdateOperationsInput | number | null
    AUDITORIUM_TYPE?: StringFieldUpdateOperationsInput | string
  }

  export type AUDITORIUMCreateManyInput = {
    AUDITORIUM: string
    AUDITORIUM_NAME?: string | null
    AUDITORIUM_CAPACITY?: number | null
    AUDITORIUM_TYPE: string
  }

  export type AUDITORIUMUpdateManyMutationInput = {
    AUDITORIUM?: StringFieldUpdateOperationsInput | string
    AUDITORIUM_NAME?: NullableStringFieldUpdateOperationsInput | string | null
    AUDITORIUM_CAPACITY?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AUDITORIUMUncheckedUpdateManyInput = {
    AUDITORIUM?: StringFieldUpdateOperationsInput | string
    AUDITORIUM_NAME?: NullableStringFieldUpdateOperationsInput | string | null
    AUDITORIUM_CAPACITY?: NullableIntFieldUpdateOperationsInput | number | null
    AUDITORIUM_TYPE?: StringFieldUpdateOperationsInput | string
  }

  export type AUDITORIUM_TYPECreateInput = {
    AUDITORIUM_TYPE: string
    AUDITORIUM_TYPENAME: string
    AUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPE?: AUDITORIUMCreateNestedManyWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput
  }

  export type AUDITORIUM_TYPEUncheckedCreateInput = {
    AUDITORIUM_TYPE: string
    AUDITORIUM_TYPENAME: string
    AUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPE?: AUDITORIUMUncheckedCreateNestedManyWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput
  }

  export type AUDITORIUM_TYPEUpdateInput = {
    AUDITORIUM_TYPE?: StringFieldUpdateOperationsInput | string
    AUDITORIUM_TYPENAME?: StringFieldUpdateOperationsInput | string
    AUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPE?: AUDITORIUMUpdateManyWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPENestedInput
  }

  export type AUDITORIUM_TYPEUncheckedUpdateInput = {
    AUDITORIUM_TYPE?: StringFieldUpdateOperationsInput | string
    AUDITORIUM_TYPENAME?: StringFieldUpdateOperationsInput | string
    AUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPE?: AUDITORIUMUncheckedUpdateManyWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPENestedInput
  }

  export type AUDITORIUM_TYPECreateManyInput = {
    AUDITORIUM_TYPE: string
    AUDITORIUM_TYPENAME: string
  }

  export type AUDITORIUM_TYPEUpdateManyMutationInput = {
    AUDITORIUM_TYPE?: StringFieldUpdateOperationsInput | string
    AUDITORIUM_TYPENAME?: StringFieldUpdateOperationsInput | string
  }

  export type AUDITORIUM_TYPEUncheckedUpdateManyInput = {
    AUDITORIUM_TYPE?: StringFieldUpdateOperationsInput | string
    AUDITORIUM_TYPENAME?: StringFieldUpdateOperationsInput | string
  }

  export type FACULTYCreateInput = {
    FACULTY: string
    FACULTY_NAME: string
    PULPIT_PULPIT_FACULTYToFACULTY?: PULPITCreateNestedManyWithoutFACULTY_PULPIT_FACULTYToFACULTYInput
  }

  export type FACULTYUncheckedCreateInput = {
    FACULTY: string
    FACULTY_NAME: string
    PULPIT_PULPIT_FACULTYToFACULTY?: PULPITUncheckedCreateNestedManyWithoutFACULTY_PULPIT_FACULTYToFACULTYInput
  }

  export type FACULTYUpdateInput = {
    FACULTY?: StringFieldUpdateOperationsInput | string
    FACULTY_NAME?: StringFieldUpdateOperationsInput | string
    PULPIT_PULPIT_FACULTYToFACULTY?: PULPITUpdateManyWithoutFACULTY_PULPIT_FACULTYToFACULTYNestedInput
  }

  export type FACULTYUncheckedUpdateInput = {
    FACULTY?: StringFieldUpdateOperationsInput | string
    FACULTY_NAME?: StringFieldUpdateOperationsInput | string
    PULPIT_PULPIT_FACULTYToFACULTY?: PULPITUncheckedUpdateManyWithoutFACULTY_PULPIT_FACULTYToFACULTYNestedInput
  }

  export type FACULTYCreateManyInput = {
    FACULTY: string
    FACULTY_NAME: string
  }

  export type FACULTYUpdateManyMutationInput = {
    FACULTY?: StringFieldUpdateOperationsInput | string
    FACULTY_NAME?: StringFieldUpdateOperationsInput | string
  }

  export type FACULTYUncheckedUpdateManyInput = {
    FACULTY?: StringFieldUpdateOperationsInput | string
    FACULTY_NAME?: StringFieldUpdateOperationsInput | string
  }

  export type PULPITCreateInput = {
    PULPIT: string
    PULPIT_NAME?: string | null
    FACULTY_PULPIT_FACULTYToFACULTY: FACULTYCreateNestedOneWithoutPULPIT_PULPIT_FACULTYToFACULTYInput
    SUBJECT_SUBJECT_PULPITToPULPIT?: SUBJECTCreateNestedManyWithoutPULPIT_SUBJECT_PULPITToPULPITInput
    TEACHER_TEACHER_PULPITToPULPIT?: TEACHERCreateNestedManyWithoutPULPIT_TEACHER_PULPITToPULPITInput
  }

  export type PULPITUncheckedCreateInput = {
    PULPIT: string
    PULPIT_NAME?: string | null
    FACULTY: string
    SUBJECT_SUBJECT_PULPITToPULPIT?: SUBJECTUncheckedCreateNestedManyWithoutPULPIT_SUBJECT_PULPITToPULPITInput
    TEACHER_TEACHER_PULPITToPULPIT?: TEACHERUncheckedCreateNestedManyWithoutPULPIT_TEACHER_PULPITToPULPITInput
  }

  export type PULPITUpdateInput = {
    PULPIT?: StringFieldUpdateOperationsInput | string
    PULPIT_NAME?: NullableStringFieldUpdateOperationsInput | string | null
    FACULTY_PULPIT_FACULTYToFACULTY?: FACULTYUpdateOneRequiredWithoutPULPIT_PULPIT_FACULTYToFACULTYNestedInput
    SUBJECT_SUBJECT_PULPITToPULPIT?: SUBJECTUpdateManyWithoutPULPIT_SUBJECT_PULPITToPULPITNestedInput
    TEACHER_TEACHER_PULPITToPULPIT?: TEACHERUpdateManyWithoutPULPIT_TEACHER_PULPITToPULPITNestedInput
  }

  export type PULPITUncheckedUpdateInput = {
    PULPIT?: StringFieldUpdateOperationsInput | string
    PULPIT_NAME?: NullableStringFieldUpdateOperationsInput | string | null
    FACULTY?: StringFieldUpdateOperationsInput | string
    SUBJECT_SUBJECT_PULPITToPULPIT?: SUBJECTUncheckedUpdateManyWithoutPULPIT_SUBJECT_PULPITToPULPITNestedInput
    TEACHER_TEACHER_PULPITToPULPIT?: TEACHERUncheckedUpdateManyWithoutPULPIT_TEACHER_PULPITToPULPITNestedInput
  }

  export type PULPITCreateManyInput = {
    PULPIT: string
    PULPIT_NAME?: string | null
    FACULTY: string
  }

  export type PULPITUpdateManyMutationInput = {
    PULPIT?: StringFieldUpdateOperationsInput | string
    PULPIT_NAME?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PULPITUncheckedUpdateManyInput = {
    PULPIT?: StringFieldUpdateOperationsInput | string
    PULPIT_NAME?: NullableStringFieldUpdateOperationsInput | string | null
    FACULTY?: StringFieldUpdateOperationsInput | string
  }

  export type SUBJECTCreateInput = {
    SUBJECT: string
    SUBJECT_NAME: string
    PULPIT_SUBJECT_PULPITToPULPIT: PULPITCreateNestedOneWithoutSUBJECT_SUBJECT_PULPITToPULPITInput
  }

  export type SUBJECTUncheckedCreateInput = {
    SUBJECT: string
    SUBJECT_NAME: string
    PULPIT: string
  }

  export type SUBJECTUpdateInput = {
    SUBJECT?: StringFieldUpdateOperationsInput | string
    SUBJECT_NAME?: StringFieldUpdateOperationsInput | string
    PULPIT_SUBJECT_PULPITToPULPIT?: PULPITUpdateOneRequiredWithoutSUBJECT_SUBJECT_PULPITToPULPITNestedInput
  }

  export type SUBJECTUncheckedUpdateInput = {
    SUBJECT?: StringFieldUpdateOperationsInput | string
    SUBJECT_NAME?: StringFieldUpdateOperationsInput | string
    PULPIT?: StringFieldUpdateOperationsInput | string
  }

  export type SUBJECTCreateManyInput = {
    SUBJECT: string
    SUBJECT_NAME: string
    PULPIT: string
  }

  export type SUBJECTUpdateManyMutationInput = {
    SUBJECT?: StringFieldUpdateOperationsInput | string
    SUBJECT_NAME?: StringFieldUpdateOperationsInput | string
  }

  export type SUBJECTUncheckedUpdateManyInput = {
    SUBJECT?: StringFieldUpdateOperationsInput | string
    SUBJECT_NAME?: StringFieldUpdateOperationsInput | string
    PULPIT?: StringFieldUpdateOperationsInput | string
  }

  export type TEACHERCreateInput = {
    TEACHER: string
    TEACHER_NAME?: string | null
    PULPIT_TEACHER_PULPITToPULPIT: PULPITCreateNestedOneWithoutTEACHER_TEACHER_PULPITToPULPITInput
  }

  export type TEACHERUncheckedCreateInput = {
    TEACHER: string
    TEACHER_NAME?: string | null
    PULPIT: string
  }

  export type TEACHERUpdateInput = {
    TEACHER?: StringFieldUpdateOperationsInput | string
    TEACHER_NAME?: NullableStringFieldUpdateOperationsInput | string | null
    PULPIT_TEACHER_PULPITToPULPIT?: PULPITUpdateOneRequiredWithoutTEACHER_TEACHER_PULPITToPULPITNestedInput
  }

  export type TEACHERUncheckedUpdateInput = {
    TEACHER?: StringFieldUpdateOperationsInput | string
    TEACHER_NAME?: NullableStringFieldUpdateOperationsInput | string | null
    PULPIT?: StringFieldUpdateOperationsInput | string
  }

  export type TEACHERCreateManyInput = {
    TEACHER: string
    TEACHER_NAME?: string | null
    PULPIT: string
  }

  export type TEACHERUpdateManyMutationInput = {
    TEACHER?: StringFieldUpdateOperationsInput | string
    TEACHER_NAME?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TEACHERUncheckedUpdateManyInput = {
    TEACHER?: StringFieldUpdateOperationsInput | string
    TEACHER_NAME?: NullableStringFieldUpdateOperationsInput | string | null
    PULPIT?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type AUDITORIUM_TYPERelationFilter = {
    is?: AUDITORIUM_TYPEWhereInput
    isNot?: AUDITORIUM_TYPEWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AUDITORIUMCountOrderByAggregateInput = {
    AUDITORIUM?: SortOrder
    AUDITORIUM_NAME?: SortOrder
    AUDITORIUM_CAPACITY?: SortOrder
    AUDITORIUM_TYPE?: SortOrder
  }

  export type AUDITORIUMAvgOrderByAggregateInput = {
    AUDITORIUM_CAPACITY?: SortOrder
  }

  export type AUDITORIUMMaxOrderByAggregateInput = {
    AUDITORIUM?: SortOrder
    AUDITORIUM_NAME?: SortOrder
    AUDITORIUM_CAPACITY?: SortOrder
    AUDITORIUM_TYPE?: SortOrder
  }

  export type AUDITORIUMMinOrderByAggregateInput = {
    AUDITORIUM?: SortOrder
    AUDITORIUM_NAME?: SortOrder
    AUDITORIUM_CAPACITY?: SortOrder
    AUDITORIUM_TYPE?: SortOrder
  }

  export type AUDITORIUMSumOrderByAggregateInput = {
    AUDITORIUM_CAPACITY?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type AUDITORIUMListRelationFilter = {
    every?: AUDITORIUMWhereInput
    some?: AUDITORIUMWhereInput
    none?: AUDITORIUMWhereInput
  }

  export type AUDITORIUMOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AUDITORIUM_TYPECountOrderByAggregateInput = {
    AUDITORIUM_TYPE?: SortOrder
    AUDITORIUM_TYPENAME?: SortOrder
  }

  export type AUDITORIUM_TYPEMaxOrderByAggregateInput = {
    AUDITORIUM_TYPE?: SortOrder
    AUDITORIUM_TYPENAME?: SortOrder
  }

  export type AUDITORIUM_TYPEMinOrderByAggregateInput = {
    AUDITORIUM_TYPE?: SortOrder
    AUDITORIUM_TYPENAME?: SortOrder
  }

  export type PULPITListRelationFilter = {
    every?: PULPITWhereInput
    some?: PULPITWhereInput
    none?: PULPITWhereInput
  }

  export type PULPITOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FACULTYCountOrderByAggregateInput = {
    FACULTY?: SortOrder
    FACULTY_NAME?: SortOrder
  }

  export type FACULTYMaxOrderByAggregateInput = {
    FACULTY?: SortOrder
    FACULTY_NAME?: SortOrder
  }

  export type FACULTYMinOrderByAggregateInput = {
    FACULTY?: SortOrder
    FACULTY_NAME?: SortOrder
  }

  export type FACULTYRelationFilter = {
    is?: FACULTYWhereInput
    isNot?: FACULTYWhereInput
  }

  export type SUBJECTListRelationFilter = {
    every?: SUBJECTWhereInput
    some?: SUBJECTWhereInput
    none?: SUBJECTWhereInput
  }

  export type TEACHERListRelationFilter = {
    every?: TEACHERWhereInput
    some?: TEACHERWhereInput
    none?: TEACHERWhereInput
  }

  export type SUBJECTOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TEACHEROrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PULPITCountOrderByAggregateInput = {
    PULPIT?: SortOrder
    PULPIT_NAME?: SortOrder
    FACULTY?: SortOrder
  }

  export type PULPITMaxOrderByAggregateInput = {
    PULPIT?: SortOrder
    PULPIT_NAME?: SortOrder
    FACULTY?: SortOrder
  }

  export type PULPITMinOrderByAggregateInput = {
    PULPIT?: SortOrder
    PULPIT_NAME?: SortOrder
    FACULTY?: SortOrder
  }

  export type PULPITRelationFilter = {
    is?: PULPITWhereInput
    isNot?: PULPITWhereInput
  }

  export type SUBJECTCountOrderByAggregateInput = {
    SUBJECT?: SortOrder
    SUBJECT_NAME?: SortOrder
    PULPIT?: SortOrder
  }

  export type SUBJECTMaxOrderByAggregateInput = {
    SUBJECT?: SortOrder
    SUBJECT_NAME?: SortOrder
    PULPIT?: SortOrder
  }

  export type SUBJECTMinOrderByAggregateInput = {
    SUBJECT?: SortOrder
    SUBJECT_NAME?: SortOrder
    PULPIT?: SortOrder
  }

  export type TEACHERCountOrderByAggregateInput = {
    TEACHER?: SortOrder
    TEACHER_NAME?: SortOrder
    PULPIT?: SortOrder
  }

  export type TEACHERMaxOrderByAggregateInput = {
    TEACHER?: SortOrder
    TEACHER_NAME?: SortOrder
    PULPIT?: SortOrder
  }

  export type TEACHERMinOrderByAggregateInput = {
    TEACHER?: SortOrder
    TEACHER_NAME?: SortOrder
    PULPIT?: SortOrder
  }

  export type AUDITORIUM_TYPECreateNestedOneWithoutAUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput = {
    create?: XOR<AUDITORIUM_TYPECreateWithoutAUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput, AUDITORIUM_TYPEUncheckedCreateWithoutAUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput>
    connectOrCreate?: AUDITORIUM_TYPECreateOrConnectWithoutAUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput
    connect?: AUDITORIUM_TYPEWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AUDITORIUM_TYPEUpdateOneRequiredWithoutAUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPENestedInput = {
    create?: XOR<AUDITORIUM_TYPECreateWithoutAUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput, AUDITORIUM_TYPEUncheckedCreateWithoutAUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput>
    connectOrCreate?: AUDITORIUM_TYPECreateOrConnectWithoutAUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput
    upsert?: AUDITORIUM_TYPEUpsertWithoutAUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput
    connect?: AUDITORIUM_TYPEWhereUniqueInput
    update?: XOR<XOR<AUDITORIUM_TYPEUpdateToOneWithWhereWithoutAUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput, AUDITORIUM_TYPEUpdateWithoutAUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput>, AUDITORIUM_TYPEUncheckedUpdateWithoutAUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput>
  }

  export type AUDITORIUMCreateNestedManyWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput = {
    create?: XOR<AUDITORIUMCreateWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput, AUDITORIUMUncheckedCreateWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput> | AUDITORIUMCreateWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput[] | AUDITORIUMUncheckedCreateWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput[]
    connectOrCreate?: AUDITORIUMCreateOrConnectWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput | AUDITORIUMCreateOrConnectWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput[]
    createMany?: AUDITORIUMCreateManyAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInputEnvelope
    connect?: AUDITORIUMWhereUniqueInput | AUDITORIUMWhereUniqueInput[]
  }

  export type AUDITORIUMUncheckedCreateNestedManyWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput = {
    create?: XOR<AUDITORIUMCreateWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput, AUDITORIUMUncheckedCreateWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput> | AUDITORIUMCreateWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput[] | AUDITORIUMUncheckedCreateWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput[]
    connectOrCreate?: AUDITORIUMCreateOrConnectWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput | AUDITORIUMCreateOrConnectWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput[]
    createMany?: AUDITORIUMCreateManyAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInputEnvelope
    connect?: AUDITORIUMWhereUniqueInput | AUDITORIUMWhereUniqueInput[]
  }

  export type AUDITORIUMUpdateManyWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPENestedInput = {
    create?: XOR<AUDITORIUMCreateWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput, AUDITORIUMUncheckedCreateWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput> | AUDITORIUMCreateWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput[] | AUDITORIUMUncheckedCreateWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput[]
    connectOrCreate?: AUDITORIUMCreateOrConnectWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput | AUDITORIUMCreateOrConnectWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput[]
    upsert?: AUDITORIUMUpsertWithWhereUniqueWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput | AUDITORIUMUpsertWithWhereUniqueWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput[]
    createMany?: AUDITORIUMCreateManyAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInputEnvelope
    set?: AUDITORIUMWhereUniqueInput | AUDITORIUMWhereUniqueInput[]
    disconnect?: AUDITORIUMWhereUniqueInput | AUDITORIUMWhereUniqueInput[]
    delete?: AUDITORIUMWhereUniqueInput | AUDITORIUMWhereUniqueInput[]
    connect?: AUDITORIUMWhereUniqueInput | AUDITORIUMWhereUniqueInput[]
    update?: AUDITORIUMUpdateWithWhereUniqueWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput | AUDITORIUMUpdateWithWhereUniqueWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput[]
    updateMany?: AUDITORIUMUpdateManyWithWhereWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput | AUDITORIUMUpdateManyWithWhereWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput[]
    deleteMany?: AUDITORIUMScalarWhereInput | AUDITORIUMScalarWhereInput[]
  }

  export type AUDITORIUMUncheckedUpdateManyWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPENestedInput = {
    create?: XOR<AUDITORIUMCreateWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput, AUDITORIUMUncheckedCreateWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput> | AUDITORIUMCreateWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput[] | AUDITORIUMUncheckedCreateWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput[]
    connectOrCreate?: AUDITORIUMCreateOrConnectWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput | AUDITORIUMCreateOrConnectWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput[]
    upsert?: AUDITORIUMUpsertWithWhereUniqueWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput | AUDITORIUMUpsertWithWhereUniqueWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput[]
    createMany?: AUDITORIUMCreateManyAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInputEnvelope
    set?: AUDITORIUMWhereUniqueInput | AUDITORIUMWhereUniqueInput[]
    disconnect?: AUDITORIUMWhereUniqueInput | AUDITORIUMWhereUniqueInput[]
    delete?: AUDITORIUMWhereUniqueInput | AUDITORIUMWhereUniqueInput[]
    connect?: AUDITORIUMWhereUniqueInput | AUDITORIUMWhereUniqueInput[]
    update?: AUDITORIUMUpdateWithWhereUniqueWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput | AUDITORIUMUpdateWithWhereUniqueWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput[]
    updateMany?: AUDITORIUMUpdateManyWithWhereWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput | AUDITORIUMUpdateManyWithWhereWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput[]
    deleteMany?: AUDITORIUMScalarWhereInput | AUDITORIUMScalarWhereInput[]
  }

  export type PULPITCreateNestedManyWithoutFACULTY_PULPIT_FACULTYToFACULTYInput = {
    create?: XOR<PULPITCreateWithoutFACULTY_PULPIT_FACULTYToFACULTYInput, PULPITUncheckedCreateWithoutFACULTY_PULPIT_FACULTYToFACULTYInput> | PULPITCreateWithoutFACULTY_PULPIT_FACULTYToFACULTYInput[] | PULPITUncheckedCreateWithoutFACULTY_PULPIT_FACULTYToFACULTYInput[]
    connectOrCreate?: PULPITCreateOrConnectWithoutFACULTY_PULPIT_FACULTYToFACULTYInput | PULPITCreateOrConnectWithoutFACULTY_PULPIT_FACULTYToFACULTYInput[]
    createMany?: PULPITCreateManyFACULTY_PULPIT_FACULTYToFACULTYInputEnvelope
    connect?: PULPITWhereUniqueInput | PULPITWhereUniqueInput[]
  }

  export type PULPITUncheckedCreateNestedManyWithoutFACULTY_PULPIT_FACULTYToFACULTYInput = {
    create?: XOR<PULPITCreateWithoutFACULTY_PULPIT_FACULTYToFACULTYInput, PULPITUncheckedCreateWithoutFACULTY_PULPIT_FACULTYToFACULTYInput> | PULPITCreateWithoutFACULTY_PULPIT_FACULTYToFACULTYInput[] | PULPITUncheckedCreateWithoutFACULTY_PULPIT_FACULTYToFACULTYInput[]
    connectOrCreate?: PULPITCreateOrConnectWithoutFACULTY_PULPIT_FACULTYToFACULTYInput | PULPITCreateOrConnectWithoutFACULTY_PULPIT_FACULTYToFACULTYInput[]
    createMany?: PULPITCreateManyFACULTY_PULPIT_FACULTYToFACULTYInputEnvelope
    connect?: PULPITWhereUniqueInput | PULPITWhereUniqueInput[]
  }

  export type PULPITUpdateManyWithoutFACULTY_PULPIT_FACULTYToFACULTYNestedInput = {
    create?: XOR<PULPITCreateWithoutFACULTY_PULPIT_FACULTYToFACULTYInput, PULPITUncheckedCreateWithoutFACULTY_PULPIT_FACULTYToFACULTYInput> | PULPITCreateWithoutFACULTY_PULPIT_FACULTYToFACULTYInput[] | PULPITUncheckedCreateWithoutFACULTY_PULPIT_FACULTYToFACULTYInput[]
    connectOrCreate?: PULPITCreateOrConnectWithoutFACULTY_PULPIT_FACULTYToFACULTYInput | PULPITCreateOrConnectWithoutFACULTY_PULPIT_FACULTYToFACULTYInput[]
    upsert?: PULPITUpsertWithWhereUniqueWithoutFACULTY_PULPIT_FACULTYToFACULTYInput | PULPITUpsertWithWhereUniqueWithoutFACULTY_PULPIT_FACULTYToFACULTYInput[]
    createMany?: PULPITCreateManyFACULTY_PULPIT_FACULTYToFACULTYInputEnvelope
    set?: PULPITWhereUniqueInput | PULPITWhereUniqueInput[]
    disconnect?: PULPITWhereUniqueInput | PULPITWhereUniqueInput[]
    delete?: PULPITWhereUniqueInput | PULPITWhereUniqueInput[]
    connect?: PULPITWhereUniqueInput | PULPITWhereUniqueInput[]
    update?: PULPITUpdateWithWhereUniqueWithoutFACULTY_PULPIT_FACULTYToFACULTYInput | PULPITUpdateWithWhereUniqueWithoutFACULTY_PULPIT_FACULTYToFACULTYInput[]
    updateMany?: PULPITUpdateManyWithWhereWithoutFACULTY_PULPIT_FACULTYToFACULTYInput | PULPITUpdateManyWithWhereWithoutFACULTY_PULPIT_FACULTYToFACULTYInput[]
    deleteMany?: PULPITScalarWhereInput | PULPITScalarWhereInput[]
  }

  export type PULPITUncheckedUpdateManyWithoutFACULTY_PULPIT_FACULTYToFACULTYNestedInput = {
    create?: XOR<PULPITCreateWithoutFACULTY_PULPIT_FACULTYToFACULTYInput, PULPITUncheckedCreateWithoutFACULTY_PULPIT_FACULTYToFACULTYInput> | PULPITCreateWithoutFACULTY_PULPIT_FACULTYToFACULTYInput[] | PULPITUncheckedCreateWithoutFACULTY_PULPIT_FACULTYToFACULTYInput[]
    connectOrCreate?: PULPITCreateOrConnectWithoutFACULTY_PULPIT_FACULTYToFACULTYInput | PULPITCreateOrConnectWithoutFACULTY_PULPIT_FACULTYToFACULTYInput[]
    upsert?: PULPITUpsertWithWhereUniqueWithoutFACULTY_PULPIT_FACULTYToFACULTYInput | PULPITUpsertWithWhereUniqueWithoutFACULTY_PULPIT_FACULTYToFACULTYInput[]
    createMany?: PULPITCreateManyFACULTY_PULPIT_FACULTYToFACULTYInputEnvelope
    set?: PULPITWhereUniqueInput | PULPITWhereUniqueInput[]
    disconnect?: PULPITWhereUniqueInput | PULPITWhereUniqueInput[]
    delete?: PULPITWhereUniqueInput | PULPITWhereUniqueInput[]
    connect?: PULPITWhereUniqueInput | PULPITWhereUniqueInput[]
    update?: PULPITUpdateWithWhereUniqueWithoutFACULTY_PULPIT_FACULTYToFACULTYInput | PULPITUpdateWithWhereUniqueWithoutFACULTY_PULPIT_FACULTYToFACULTYInput[]
    updateMany?: PULPITUpdateManyWithWhereWithoutFACULTY_PULPIT_FACULTYToFACULTYInput | PULPITUpdateManyWithWhereWithoutFACULTY_PULPIT_FACULTYToFACULTYInput[]
    deleteMany?: PULPITScalarWhereInput | PULPITScalarWhereInput[]
  }

  export type FACULTYCreateNestedOneWithoutPULPIT_PULPIT_FACULTYToFACULTYInput = {
    create?: XOR<FACULTYCreateWithoutPULPIT_PULPIT_FACULTYToFACULTYInput, FACULTYUncheckedCreateWithoutPULPIT_PULPIT_FACULTYToFACULTYInput>
    connectOrCreate?: FACULTYCreateOrConnectWithoutPULPIT_PULPIT_FACULTYToFACULTYInput
    connect?: FACULTYWhereUniqueInput
  }

  export type SUBJECTCreateNestedManyWithoutPULPIT_SUBJECT_PULPITToPULPITInput = {
    create?: XOR<SUBJECTCreateWithoutPULPIT_SUBJECT_PULPITToPULPITInput, SUBJECTUncheckedCreateWithoutPULPIT_SUBJECT_PULPITToPULPITInput> | SUBJECTCreateWithoutPULPIT_SUBJECT_PULPITToPULPITInput[] | SUBJECTUncheckedCreateWithoutPULPIT_SUBJECT_PULPITToPULPITInput[]
    connectOrCreate?: SUBJECTCreateOrConnectWithoutPULPIT_SUBJECT_PULPITToPULPITInput | SUBJECTCreateOrConnectWithoutPULPIT_SUBJECT_PULPITToPULPITInput[]
    createMany?: SUBJECTCreateManyPULPIT_SUBJECT_PULPITToPULPITInputEnvelope
    connect?: SUBJECTWhereUniqueInput | SUBJECTWhereUniqueInput[]
  }

  export type TEACHERCreateNestedManyWithoutPULPIT_TEACHER_PULPITToPULPITInput = {
    create?: XOR<TEACHERCreateWithoutPULPIT_TEACHER_PULPITToPULPITInput, TEACHERUncheckedCreateWithoutPULPIT_TEACHER_PULPITToPULPITInput> | TEACHERCreateWithoutPULPIT_TEACHER_PULPITToPULPITInput[] | TEACHERUncheckedCreateWithoutPULPIT_TEACHER_PULPITToPULPITInput[]
    connectOrCreate?: TEACHERCreateOrConnectWithoutPULPIT_TEACHER_PULPITToPULPITInput | TEACHERCreateOrConnectWithoutPULPIT_TEACHER_PULPITToPULPITInput[]
    createMany?: TEACHERCreateManyPULPIT_TEACHER_PULPITToPULPITInputEnvelope
    connect?: TEACHERWhereUniqueInput | TEACHERWhereUniqueInput[]
  }

  export type SUBJECTUncheckedCreateNestedManyWithoutPULPIT_SUBJECT_PULPITToPULPITInput = {
    create?: XOR<SUBJECTCreateWithoutPULPIT_SUBJECT_PULPITToPULPITInput, SUBJECTUncheckedCreateWithoutPULPIT_SUBJECT_PULPITToPULPITInput> | SUBJECTCreateWithoutPULPIT_SUBJECT_PULPITToPULPITInput[] | SUBJECTUncheckedCreateWithoutPULPIT_SUBJECT_PULPITToPULPITInput[]
    connectOrCreate?: SUBJECTCreateOrConnectWithoutPULPIT_SUBJECT_PULPITToPULPITInput | SUBJECTCreateOrConnectWithoutPULPIT_SUBJECT_PULPITToPULPITInput[]
    createMany?: SUBJECTCreateManyPULPIT_SUBJECT_PULPITToPULPITInputEnvelope
    connect?: SUBJECTWhereUniqueInput | SUBJECTWhereUniqueInput[]
  }

  export type TEACHERUncheckedCreateNestedManyWithoutPULPIT_TEACHER_PULPITToPULPITInput = {
    create?: XOR<TEACHERCreateWithoutPULPIT_TEACHER_PULPITToPULPITInput, TEACHERUncheckedCreateWithoutPULPIT_TEACHER_PULPITToPULPITInput> | TEACHERCreateWithoutPULPIT_TEACHER_PULPITToPULPITInput[] | TEACHERUncheckedCreateWithoutPULPIT_TEACHER_PULPITToPULPITInput[]
    connectOrCreate?: TEACHERCreateOrConnectWithoutPULPIT_TEACHER_PULPITToPULPITInput | TEACHERCreateOrConnectWithoutPULPIT_TEACHER_PULPITToPULPITInput[]
    createMany?: TEACHERCreateManyPULPIT_TEACHER_PULPITToPULPITInputEnvelope
    connect?: TEACHERWhereUniqueInput | TEACHERWhereUniqueInput[]
  }

  export type FACULTYUpdateOneRequiredWithoutPULPIT_PULPIT_FACULTYToFACULTYNestedInput = {
    create?: XOR<FACULTYCreateWithoutPULPIT_PULPIT_FACULTYToFACULTYInput, FACULTYUncheckedCreateWithoutPULPIT_PULPIT_FACULTYToFACULTYInput>
    connectOrCreate?: FACULTYCreateOrConnectWithoutPULPIT_PULPIT_FACULTYToFACULTYInput
    upsert?: FACULTYUpsertWithoutPULPIT_PULPIT_FACULTYToFACULTYInput
    connect?: FACULTYWhereUniqueInput
    update?: XOR<XOR<FACULTYUpdateToOneWithWhereWithoutPULPIT_PULPIT_FACULTYToFACULTYInput, FACULTYUpdateWithoutPULPIT_PULPIT_FACULTYToFACULTYInput>, FACULTYUncheckedUpdateWithoutPULPIT_PULPIT_FACULTYToFACULTYInput>
  }

  export type SUBJECTUpdateManyWithoutPULPIT_SUBJECT_PULPITToPULPITNestedInput = {
    create?: XOR<SUBJECTCreateWithoutPULPIT_SUBJECT_PULPITToPULPITInput, SUBJECTUncheckedCreateWithoutPULPIT_SUBJECT_PULPITToPULPITInput> | SUBJECTCreateWithoutPULPIT_SUBJECT_PULPITToPULPITInput[] | SUBJECTUncheckedCreateWithoutPULPIT_SUBJECT_PULPITToPULPITInput[]
    connectOrCreate?: SUBJECTCreateOrConnectWithoutPULPIT_SUBJECT_PULPITToPULPITInput | SUBJECTCreateOrConnectWithoutPULPIT_SUBJECT_PULPITToPULPITInput[]
    upsert?: SUBJECTUpsertWithWhereUniqueWithoutPULPIT_SUBJECT_PULPITToPULPITInput | SUBJECTUpsertWithWhereUniqueWithoutPULPIT_SUBJECT_PULPITToPULPITInput[]
    createMany?: SUBJECTCreateManyPULPIT_SUBJECT_PULPITToPULPITInputEnvelope
    set?: SUBJECTWhereUniqueInput | SUBJECTWhereUniqueInput[]
    disconnect?: SUBJECTWhereUniqueInput | SUBJECTWhereUniqueInput[]
    delete?: SUBJECTWhereUniqueInput | SUBJECTWhereUniqueInput[]
    connect?: SUBJECTWhereUniqueInput | SUBJECTWhereUniqueInput[]
    update?: SUBJECTUpdateWithWhereUniqueWithoutPULPIT_SUBJECT_PULPITToPULPITInput | SUBJECTUpdateWithWhereUniqueWithoutPULPIT_SUBJECT_PULPITToPULPITInput[]
    updateMany?: SUBJECTUpdateManyWithWhereWithoutPULPIT_SUBJECT_PULPITToPULPITInput | SUBJECTUpdateManyWithWhereWithoutPULPIT_SUBJECT_PULPITToPULPITInput[]
    deleteMany?: SUBJECTScalarWhereInput | SUBJECTScalarWhereInput[]
  }

  export type TEACHERUpdateManyWithoutPULPIT_TEACHER_PULPITToPULPITNestedInput = {
    create?: XOR<TEACHERCreateWithoutPULPIT_TEACHER_PULPITToPULPITInput, TEACHERUncheckedCreateWithoutPULPIT_TEACHER_PULPITToPULPITInput> | TEACHERCreateWithoutPULPIT_TEACHER_PULPITToPULPITInput[] | TEACHERUncheckedCreateWithoutPULPIT_TEACHER_PULPITToPULPITInput[]
    connectOrCreate?: TEACHERCreateOrConnectWithoutPULPIT_TEACHER_PULPITToPULPITInput | TEACHERCreateOrConnectWithoutPULPIT_TEACHER_PULPITToPULPITInput[]
    upsert?: TEACHERUpsertWithWhereUniqueWithoutPULPIT_TEACHER_PULPITToPULPITInput | TEACHERUpsertWithWhereUniqueWithoutPULPIT_TEACHER_PULPITToPULPITInput[]
    createMany?: TEACHERCreateManyPULPIT_TEACHER_PULPITToPULPITInputEnvelope
    set?: TEACHERWhereUniqueInput | TEACHERWhereUniqueInput[]
    disconnect?: TEACHERWhereUniqueInput | TEACHERWhereUniqueInput[]
    delete?: TEACHERWhereUniqueInput | TEACHERWhereUniqueInput[]
    connect?: TEACHERWhereUniqueInput | TEACHERWhereUniqueInput[]
    update?: TEACHERUpdateWithWhereUniqueWithoutPULPIT_TEACHER_PULPITToPULPITInput | TEACHERUpdateWithWhereUniqueWithoutPULPIT_TEACHER_PULPITToPULPITInput[]
    updateMany?: TEACHERUpdateManyWithWhereWithoutPULPIT_TEACHER_PULPITToPULPITInput | TEACHERUpdateManyWithWhereWithoutPULPIT_TEACHER_PULPITToPULPITInput[]
    deleteMany?: TEACHERScalarWhereInput | TEACHERScalarWhereInput[]
  }

  export type SUBJECTUncheckedUpdateManyWithoutPULPIT_SUBJECT_PULPITToPULPITNestedInput = {
    create?: XOR<SUBJECTCreateWithoutPULPIT_SUBJECT_PULPITToPULPITInput, SUBJECTUncheckedCreateWithoutPULPIT_SUBJECT_PULPITToPULPITInput> | SUBJECTCreateWithoutPULPIT_SUBJECT_PULPITToPULPITInput[] | SUBJECTUncheckedCreateWithoutPULPIT_SUBJECT_PULPITToPULPITInput[]
    connectOrCreate?: SUBJECTCreateOrConnectWithoutPULPIT_SUBJECT_PULPITToPULPITInput | SUBJECTCreateOrConnectWithoutPULPIT_SUBJECT_PULPITToPULPITInput[]
    upsert?: SUBJECTUpsertWithWhereUniqueWithoutPULPIT_SUBJECT_PULPITToPULPITInput | SUBJECTUpsertWithWhereUniqueWithoutPULPIT_SUBJECT_PULPITToPULPITInput[]
    createMany?: SUBJECTCreateManyPULPIT_SUBJECT_PULPITToPULPITInputEnvelope
    set?: SUBJECTWhereUniqueInput | SUBJECTWhereUniqueInput[]
    disconnect?: SUBJECTWhereUniqueInput | SUBJECTWhereUniqueInput[]
    delete?: SUBJECTWhereUniqueInput | SUBJECTWhereUniqueInput[]
    connect?: SUBJECTWhereUniqueInput | SUBJECTWhereUniqueInput[]
    update?: SUBJECTUpdateWithWhereUniqueWithoutPULPIT_SUBJECT_PULPITToPULPITInput | SUBJECTUpdateWithWhereUniqueWithoutPULPIT_SUBJECT_PULPITToPULPITInput[]
    updateMany?: SUBJECTUpdateManyWithWhereWithoutPULPIT_SUBJECT_PULPITToPULPITInput | SUBJECTUpdateManyWithWhereWithoutPULPIT_SUBJECT_PULPITToPULPITInput[]
    deleteMany?: SUBJECTScalarWhereInput | SUBJECTScalarWhereInput[]
  }

  export type TEACHERUncheckedUpdateManyWithoutPULPIT_TEACHER_PULPITToPULPITNestedInput = {
    create?: XOR<TEACHERCreateWithoutPULPIT_TEACHER_PULPITToPULPITInput, TEACHERUncheckedCreateWithoutPULPIT_TEACHER_PULPITToPULPITInput> | TEACHERCreateWithoutPULPIT_TEACHER_PULPITToPULPITInput[] | TEACHERUncheckedCreateWithoutPULPIT_TEACHER_PULPITToPULPITInput[]
    connectOrCreate?: TEACHERCreateOrConnectWithoutPULPIT_TEACHER_PULPITToPULPITInput | TEACHERCreateOrConnectWithoutPULPIT_TEACHER_PULPITToPULPITInput[]
    upsert?: TEACHERUpsertWithWhereUniqueWithoutPULPIT_TEACHER_PULPITToPULPITInput | TEACHERUpsertWithWhereUniqueWithoutPULPIT_TEACHER_PULPITToPULPITInput[]
    createMany?: TEACHERCreateManyPULPIT_TEACHER_PULPITToPULPITInputEnvelope
    set?: TEACHERWhereUniqueInput | TEACHERWhereUniqueInput[]
    disconnect?: TEACHERWhereUniqueInput | TEACHERWhereUniqueInput[]
    delete?: TEACHERWhereUniqueInput | TEACHERWhereUniqueInput[]
    connect?: TEACHERWhereUniqueInput | TEACHERWhereUniqueInput[]
    update?: TEACHERUpdateWithWhereUniqueWithoutPULPIT_TEACHER_PULPITToPULPITInput | TEACHERUpdateWithWhereUniqueWithoutPULPIT_TEACHER_PULPITToPULPITInput[]
    updateMany?: TEACHERUpdateManyWithWhereWithoutPULPIT_TEACHER_PULPITToPULPITInput | TEACHERUpdateManyWithWhereWithoutPULPIT_TEACHER_PULPITToPULPITInput[]
    deleteMany?: TEACHERScalarWhereInput | TEACHERScalarWhereInput[]
  }

  export type PULPITCreateNestedOneWithoutSUBJECT_SUBJECT_PULPITToPULPITInput = {
    create?: XOR<PULPITCreateWithoutSUBJECT_SUBJECT_PULPITToPULPITInput, PULPITUncheckedCreateWithoutSUBJECT_SUBJECT_PULPITToPULPITInput>
    connectOrCreate?: PULPITCreateOrConnectWithoutSUBJECT_SUBJECT_PULPITToPULPITInput
    connect?: PULPITWhereUniqueInput
  }

  export type PULPITUpdateOneRequiredWithoutSUBJECT_SUBJECT_PULPITToPULPITNestedInput = {
    create?: XOR<PULPITCreateWithoutSUBJECT_SUBJECT_PULPITToPULPITInput, PULPITUncheckedCreateWithoutSUBJECT_SUBJECT_PULPITToPULPITInput>
    connectOrCreate?: PULPITCreateOrConnectWithoutSUBJECT_SUBJECT_PULPITToPULPITInput
    upsert?: PULPITUpsertWithoutSUBJECT_SUBJECT_PULPITToPULPITInput
    connect?: PULPITWhereUniqueInput
    update?: XOR<XOR<PULPITUpdateToOneWithWhereWithoutSUBJECT_SUBJECT_PULPITToPULPITInput, PULPITUpdateWithoutSUBJECT_SUBJECT_PULPITToPULPITInput>, PULPITUncheckedUpdateWithoutSUBJECT_SUBJECT_PULPITToPULPITInput>
  }

  export type PULPITCreateNestedOneWithoutTEACHER_TEACHER_PULPITToPULPITInput = {
    create?: XOR<PULPITCreateWithoutTEACHER_TEACHER_PULPITToPULPITInput, PULPITUncheckedCreateWithoutTEACHER_TEACHER_PULPITToPULPITInput>
    connectOrCreate?: PULPITCreateOrConnectWithoutTEACHER_TEACHER_PULPITToPULPITInput
    connect?: PULPITWhereUniqueInput
  }

  export type PULPITUpdateOneRequiredWithoutTEACHER_TEACHER_PULPITToPULPITNestedInput = {
    create?: XOR<PULPITCreateWithoutTEACHER_TEACHER_PULPITToPULPITInput, PULPITUncheckedCreateWithoutTEACHER_TEACHER_PULPITToPULPITInput>
    connectOrCreate?: PULPITCreateOrConnectWithoutTEACHER_TEACHER_PULPITToPULPITInput
    upsert?: PULPITUpsertWithoutTEACHER_TEACHER_PULPITToPULPITInput
    connect?: PULPITWhereUniqueInput
    update?: XOR<XOR<PULPITUpdateToOneWithWhereWithoutTEACHER_TEACHER_PULPITToPULPITInput, PULPITUpdateWithoutTEACHER_TEACHER_PULPITToPULPITInput>, PULPITUncheckedUpdateWithoutTEACHER_TEACHER_PULPITToPULPITInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type AUDITORIUM_TYPECreateWithoutAUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput = {
    AUDITORIUM_TYPE: string
    AUDITORIUM_TYPENAME: string
  }

  export type AUDITORIUM_TYPEUncheckedCreateWithoutAUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput = {
    AUDITORIUM_TYPE: string
    AUDITORIUM_TYPENAME: string
  }

  export type AUDITORIUM_TYPECreateOrConnectWithoutAUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput = {
    where: AUDITORIUM_TYPEWhereUniqueInput
    create: XOR<AUDITORIUM_TYPECreateWithoutAUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput, AUDITORIUM_TYPEUncheckedCreateWithoutAUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput>
  }

  export type AUDITORIUM_TYPEUpsertWithoutAUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput = {
    update: XOR<AUDITORIUM_TYPEUpdateWithoutAUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput, AUDITORIUM_TYPEUncheckedUpdateWithoutAUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput>
    create: XOR<AUDITORIUM_TYPECreateWithoutAUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput, AUDITORIUM_TYPEUncheckedCreateWithoutAUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput>
    where?: AUDITORIUM_TYPEWhereInput
  }

  export type AUDITORIUM_TYPEUpdateToOneWithWhereWithoutAUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput = {
    where?: AUDITORIUM_TYPEWhereInput
    data: XOR<AUDITORIUM_TYPEUpdateWithoutAUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput, AUDITORIUM_TYPEUncheckedUpdateWithoutAUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput>
  }

  export type AUDITORIUM_TYPEUpdateWithoutAUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput = {
    AUDITORIUM_TYPE?: StringFieldUpdateOperationsInput | string
    AUDITORIUM_TYPENAME?: StringFieldUpdateOperationsInput | string
  }

  export type AUDITORIUM_TYPEUncheckedUpdateWithoutAUDITORIUM_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput = {
    AUDITORIUM_TYPE?: StringFieldUpdateOperationsInput | string
    AUDITORIUM_TYPENAME?: StringFieldUpdateOperationsInput | string
  }

  export type AUDITORIUMCreateWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput = {
    AUDITORIUM: string
    AUDITORIUM_NAME?: string | null
    AUDITORIUM_CAPACITY?: number | null
  }

  export type AUDITORIUMUncheckedCreateWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput = {
    AUDITORIUM: string
    AUDITORIUM_NAME?: string | null
    AUDITORIUM_CAPACITY?: number | null
  }

  export type AUDITORIUMCreateOrConnectWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput = {
    where: AUDITORIUMWhereUniqueInput
    create: XOR<AUDITORIUMCreateWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput, AUDITORIUMUncheckedCreateWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput>
  }

  export type AUDITORIUMCreateManyAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInputEnvelope = {
    data: AUDITORIUMCreateManyAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput | AUDITORIUMCreateManyAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput[]
  }

  export type AUDITORIUMUpsertWithWhereUniqueWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput = {
    where: AUDITORIUMWhereUniqueInput
    update: XOR<AUDITORIUMUpdateWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput, AUDITORIUMUncheckedUpdateWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput>
    create: XOR<AUDITORIUMCreateWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput, AUDITORIUMUncheckedCreateWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput>
  }

  export type AUDITORIUMUpdateWithWhereUniqueWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput = {
    where: AUDITORIUMWhereUniqueInput
    data: XOR<AUDITORIUMUpdateWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput, AUDITORIUMUncheckedUpdateWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput>
  }

  export type AUDITORIUMUpdateManyWithWhereWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput = {
    where: AUDITORIUMScalarWhereInput
    data: XOR<AUDITORIUMUpdateManyMutationInput, AUDITORIUMUncheckedUpdateManyWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput>
  }

  export type AUDITORIUMScalarWhereInput = {
    AND?: AUDITORIUMScalarWhereInput | AUDITORIUMScalarWhereInput[]
    OR?: AUDITORIUMScalarWhereInput[]
    NOT?: AUDITORIUMScalarWhereInput | AUDITORIUMScalarWhereInput[]
    AUDITORIUM?: StringFilter<"AUDITORIUM"> | string
    AUDITORIUM_NAME?: StringNullableFilter<"AUDITORIUM"> | string | null
    AUDITORIUM_CAPACITY?: IntNullableFilter<"AUDITORIUM"> | number | null
    AUDITORIUM_TYPE?: StringFilter<"AUDITORIUM"> | string
  }

  export type PULPITCreateWithoutFACULTY_PULPIT_FACULTYToFACULTYInput = {
    PULPIT: string
    PULPIT_NAME?: string | null
    SUBJECT_SUBJECT_PULPITToPULPIT?: SUBJECTCreateNestedManyWithoutPULPIT_SUBJECT_PULPITToPULPITInput
    TEACHER_TEACHER_PULPITToPULPIT?: TEACHERCreateNestedManyWithoutPULPIT_TEACHER_PULPITToPULPITInput
  }

  export type PULPITUncheckedCreateWithoutFACULTY_PULPIT_FACULTYToFACULTYInput = {
    PULPIT: string
    PULPIT_NAME?: string | null
    SUBJECT_SUBJECT_PULPITToPULPIT?: SUBJECTUncheckedCreateNestedManyWithoutPULPIT_SUBJECT_PULPITToPULPITInput
    TEACHER_TEACHER_PULPITToPULPIT?: TEACHERUncheckedCreateNestedManyWithoutPULPIT_TEACHER_PULPITToPULPITInput
  }

  export type PULPITCreateOrConnectWithoutFACULTY_PULPIT_FACULTYToFACULTYInput = {
    where: PULPITWhereUniqueInput
    create: XOR<PULPITCreateWithoutFACULTY_PULPIT_FACULTYToFACULTYInput, PULPITUncheckedCreateWithoutFACULTY_PULPIT_FACULTYToFACULTYInput>
  }

  export type PULPITCreateManyFACULTY_PULPIT_FACULTYToFACULTYInputEnvelope = {
    data: PULPITCreateManyFACULTY_PULPIT_FACULTYToFACULTYInput | PULPITCreateManyFACULTY_PULPIT_FACULTYToFACULTYInput[]
  }

  export type PULPITUpsertWithWhereUniqueWithoutFACULTY_PULPIT_FACULTYToFACULTYInput = {
    where: PULPITWhereUniqueInput
    update: XOR<PULPITUpdateWithoutFACULTY_PULPIT_FACULTYToFACULTYInput, PULPITUncheckedUpdateWithoutFACULTY_PULPIT_FACULTYToFACULTYInput>
    create: XOR<PULPITCreateWithoutFACULTY_PULPIT_FACULTYToFACULTYInput, PULPITUncheckedCreateWithoutFACULTY_PULPIT_FACULTYToFACULTYInput>
  }

  export type PULPITUpdateWithWhereUniqueWithoutFACULTY_PULPIT_FACULTYToFACULTYInput = {
    where: PULPITWhereUniqueInput
    data: XOR<PULPITUpdateWithoutFACULTY_PULPIT_FACULTYToFACULTYInput, PULPITUncheckedUpdateWithoutFACULTY_PULPIT_FACULTYToFACULTYInput>
  }

  export type PULPITUpdateManyWithWhereWithoutFACULTY_PULPIT_FACULTYToFACULTYInput = {
    where: PULPITScalarWhereInput
    data: XOR<PULPITUpdateManyMutationInput, PULPITUncheckedUpdateManyWithoutFACULTY_PULPIT_FACULTYToFACULTYInput>
  }

  export type PULPITScalarWhereInput = {
    AND?: PULPITScalarWhereInput | PULPITScalarWhereInput[]
    OR?: PULPITScalarWhereInput[]
    NOT?: PULPITScalarWhereInput | PULPITScalarWhereInput[]
    PULPIT?: StringFilter<"PULPIT"> | string
    PULPIT_NAME?: StringNullableFilter<"PULPIT"> | string | null
    FACULTY?: StringFilter<"PULPIT"> | string
  }

  export type FACULTYCreateWithoutPULPIT_PULPIT_FACULTYToFACULTYInput = {
    FACULTY: string
    FACULTY_NAME: string
  }

  export type FACULTYUncheckedCreateWithoutPULPIT_PULPIT_FACULTYToFACULTYInput = {
    FACULTY: string
    FACULTY_NAME: string
  }

  export type FACULTYCreateOrConnectWithoutPULPIT_PULPIT_FACULTYToFACULTYInput = {
    where: FACULTYWhereUniqueInput
    create: XOR<FACULTYCreateWithoutPULPIT_PULPIT_FACULTYToFACULTYInput, FACULTYUncheckedCreateWithoutPULPIT_PULPIT_FACULTYToFACULTYInput>
  }

  export type SUBJECTCreateWithoutPULPIT_SUBJECT_PULPITToPULPITInput = {
    SUBJECT: string
    SUBJECT_NAME: string
  }

  export type SUBJECTUncheckedCreateWithoutPULPIT_SUBJECT_PULPITToPULPITInput = {
    SUBJECT: string
    SUBJECT_NAME: string
  }

  export type SUBJECTCreateOrConnectWithoutPULPIT_SUBJECT_PULPITToPULPITInput = {
    where: SUBJECTWhereUniqueInput
    create: XOR<SUBJECTCreateWithoutPULPIT_SUBJECT_PULPITToPULPITInput, SUBJECTUncheckedCreateWithoutPULPIT_SUBJECT_PULPITToPULPITInput>
  }

  export type SUBJECTCreateManyPULPIT_SUBJECT_PULPITToPULPITInputEnvelope = {
    data: SUBJECTCreateManyPULPIT_SUBJECT_PULPITToPULPITInput | SUBJECTCreateManyPULPIT_SUBJECT_PULPITToPULPITInput[]
  }

  export type TEACHERCreateWithoutPULPIT_TEACHER_PULPITToPULPITInput = {
    TEACHER: string
    TEACHER_NAME?: string | null
  }

  export type TEACHERUncheckedCreateWithoutPULPIT_TEACHER_PULPITToPULPITInput = {
    TEACHER: string
    TEACHER_NAME?: string | null
  }

  export type TEACHERCreateOrConnectWithoutPULPIT_TEACHER_PULPITToPULPITInput = {
    where: TEACHERWhereUniqueInput
    create: XOR<TEACHERCreateWithoutPULPIT_TEACHER_PULPITToPULPITInput, TEACHERUncheckedCreateWithoutPULPIT_TEACHER_PULPITToPULPITInput>
  }

  export type TEACHERCreateManyPULPIT_TEACHER_PULPITToPULPITInputEnvelope = {
    data: TEACHERCreateManyPULPIT_TEACHER_PULPITToPULPITInput | TEACHERCreateManyPULPIT_TEACHER_PULPITToPULPITInput[]
  }

  export type FACULTYUpsertWithoutPULPIT_PULPIT_FACULTYToFACULTYInput = {
    update: XOR<FACULTYUpdateWithoutPULPIT_PULPIT_FACULTYToFACULTYInput, FACULTYUncheckedUpdateWithoutPULPIT_PULPIT_FACULTYToFACULTYInput>
    create: XOR<FACULTYCreateWithoutPULPIT_PULPIT_FACULTYToFACULTYInput, FACULTYUncheckedCreateWithoutPULPIT_PULPIT_FACULTYToFACULTYInput>
    where?: FACULTYWhereInput
  }

  export type FACULTYUpdateToOneWithWhereWithoutPULPIT_PULPIT_FACULTYToFACULTYInput = {
    where?: FACULTYWhereInput
    data: XOR<FACULTYUpdateWithoutPULPIT_PULPIT_FACULTYToFACULTYInput, FACULTYUncheckedUpdateWithoutPULPIT_PULPIT_FACULTYToFACULTYInput>
  }

  export type FACULTYUpdateWithoutPULPIT_PULPIT_FACULTYToFACULTYInput = {
    FACULTY?: StringFieldUpdateOperationsInput | string
    FACULTY_NAME?: StringFieldUpdateOperationsInput | string
  }

  export type FACULTYUncheckedUpdateWithoutPULPIT_PULPIT_FACULTYToFACULTYInput = {
    FACULTY?: StringFieldUpdateOperationsInput | string
    FACULTY_NAME?: StringFieldUpdateOperationsInput | string
  }

  export type SUBJECTUpsertWithWhereUniqueWithoutPULPIT_SUBJECT_PULPITToPULPITInput = {
    where: SUBJECTWhereUniqueInput
    update: XOR<SUBJECTUpdateWithoutPULPIT_SUBJECT_PULPITToPULPITInput, SUBJECTUncheckedUpdateWithoutPULPIT_SUBJECT_PULPITToPULPITInput>
    create: XOR<SUBJECTCreateWithoutPULPIT_SUBJECT_PULPITToPULPITInput, SUBJECTUncheckedCreateWithoutPULPIT_SUBJECT_PULPITToPULPITInput>
  }

  export type SUBJECTUpdateWithWhereUniqueWithoutPULPIT_SUBJECT_PULPITToPULPITInput = {
    where: SUBJECTWhereUniqueInput
    data: XOR<SUBJECTUpdateWithoutPULPIT_SUBJECT_PULPITToPULPITInput, SUBJECTUncheckedUpdateWithoutPULPIT_SUBJECT_PULPITToPULPITInput>
  }

  export type SUBJECTUpdateManyWithWhereWithoutPULPIT_SUBJECT_PULPITToPULPITInput = {
    where: SUBJECTScalarWhereInput
    data: XOR<SUBJECTUpdateManyMutationInput, SUBJECTUncheckedUpdateManyWithoutPULPIT_SUBJECT_PULPITToPULPITInput>
  }

  export type SUBJECTScalarWhereInput = {
    AND?: SUBJECTScalarWhereInput | SUBJECTScalarWhereInput[]
    OR?: SUBJECTScalarWhereInput[]
    NOT?: SUBJECTScalarWhereInput | SUBJECTScalarWhereInput[]
    SUBJECT?: StringFilter<"SUBJECT"> | string
    SUBJECT_NAME?: StringFilter<"SUBJECT"> | string
    PULPIT?: StringFilter<"SUBJECT"> | string
  }

  export type TEACHERUpsertWithWhereUniqueWithoutPULPIT_TEACHER_PULPITToPULPITInput = {
    where: TEACHERWhereUniqueInput
    update: XOR<TEACHERUpdateWithoutPULPIT_TEACHER_PULPITToPULPITInput, TEACHERUncheckedUpdateWithoutPULPIT_TEACHER_PULPITToPULPITInput>
    create: XOR<TEACHERCreateWithoutPULPIT_TEACHER_PULPITToPULPITInput, TEACHERUncheckedCreateWithoutPULPIT_TEACHER_PULPITToPULPITInput>
  }

  export type TEACHERUpdateWithWhereUniqueWithoutPULPIT_TEACHER_PULPITToPULPITInput = {
    where: TEACHERWhereUniqueInput
    data: XOR<TEACHERUpdateWithoutPULPIT_TEACHER_PULPITToPULPITInput, TEACHERUncheckedUpdateWithoutPULPIT_TEACHER_PULPITToPULPITInput>
  }

  export type TEACHERUpdateManyWithWhereWithoutPULPIT_TEACHER_PULPITToPULPITInput = {
    where: TEACHERScalarWhereInput
    data: XOR<TEACHERUpdateManyMutationInput, TEACHERUncheckedUpdateManyWithoutPULPIT_TEACHER_PULPITToPULPITInput>
  }

  export type TEACHERScalarWhereInput = {
    AND?: TEACHERScalarWhereInput | TEACHERScalarWhereInput[]
    OR?: TEACHERScalarWhereInput[]
    NOT?: TEACHERScalarWhereInput | TEACHERScalarWhereInput[]
    TEACHER?: StringFilter<"TEACHER"> | string
    TEACHER_NAME?: StringNullableFilter<"TEACHER"> | string | null
    PULPIT?: StringFilter<"TEACHER"> | string
  }

  export type PULPITCreateWithoutSUBJECT_SUBJECT_PULPITToPULPITInput = {
    PULPIT: string
    PULPIT_NAME?: string | null
    FACULTY_PULPIT_FACULTYToFACULTY: FACULTYCreateNestedOneWithoutPULPIT_PULPIT_FACULTYToFACULTYInput
    TEACHER_TEACHER_PULPITToPULPIT?: TEACHERCreateNestedManyWithoutPULPIT_TEACHER_PULPITToPULPITInput
  }

  export type PULPITUncheckedCreateWithoutSUBJECT_SUBJECT_PULPITToPULPITInput = {
    PULPIT: string
    PULPIT_NAME?: string | null
    FACULTY: string
    TEACHER_TEACHER_PULPITToPULPIT?: TEACHERUncheckedCreateNestedManyWithoutPULPIT_TEACHER_PULPITToPULPITInput
  }

  export type PULPITCreateOrConnectWithoutSUBJECT_SUBJECT_PULPITToPULPITInput = {
    where: PULPITWhereUniqueInput
    create: XOR<PULPITCreateWithoutSUBJECT_SUBJECT_PULPITToPULPITInput, PULPITUncheckedCreateWithoutSUBJECT_SUBJECT_PULPITToPULPITInput>
  }

  export type PULPITUpsertWithoutSUBJECT_SUBJECT_PULPITToPULPITInput = {
    update: XOR<PULPITUpdateWithoutSUBJECT_SUBJECT_PULPITToPULPITInput, PULPITUncheckedUpdateWithoutSUBJECT_SUBJECT_PULPITToPULPITInput>
    create: XOR<PULPITCreateWithoutSUBJECT_SUBJECT_PULPITToPULPITInput, PULPITUncheckedCreateWithoutSUBJECT_SUBJECT_PULPITToPULPITInput>
    where?: PULPITWhereInput
  }

  export type PULPITUpdateToOneWithWhereWithoutSUBJECT_SUBJECT_PULPITToPULPITInput = {
    where?: PULPITWhereInput
    data: XOR<PULPITUpdateWithoutSUBJECT_SUBJECT_PULPITToPULPITInput, PULPITUncheckedUpdateWithoutSUBJECT_SUBJECT_PULPITToPULPITInput>
  }

  export type PULPITUpdateWithoutSUBJECT_SUBJECT_PULPITToPULPITInput = {
    PULPIT?: StringFieldUpdateOperationsInput | string
    PULPIT_NAME?: NullableStringFieldUpdateOperationsInput | string | null
    FACULTY_PULPIT_FACULTYToFACULTY?: FACULTYUpdateOneRequiredWithoutPULPIT_PULPIT_FACULTYToFACULTYNestedInput
    TEACHER_TEACHER_PULPITToPULPIT?: TEACHERUpdateManyWithoutPULPIT_TEACHER_PULPITToPULPITNestedInput
  }

  export type PULPITUncheckedUpdateWithoutSUBJECT_SUBJECT_PULPITToPULPITInput = {
    PULPIT?: StringFieldUpdateOperationsInput | string
    PULPIT_NAME?: NullableStringFieldUpdateOperationsInput | string | null
    FACULTY?: StringFieldUpdateOperationsInput | string
    TEACHER_TEACHER_PULPITToPULPIT?: TEACHERUncheckedUpdateManyWithoutPULPIT_TEACHER_PULPITToPULPITNestedInput
  }

  export type PULPITCreateWithoutTEACHER_TEACHER_PULPITToPULPITInput = {
    PULPIT: string
    PULPIT_NAME?: string | null
    FACULTY_PULPIT_FACULTYToFACULTY: FACULTYCreateNestedOneWithoutPULPIT_PULPIT_FACULTYToFACULTYInput
    SUBJECT_SUBJECT_PULPITToPULPIT?: SUBJECTCreateNestedManyWithoutPULPIT_SUBJECT_PULPITToPULPITInput
  }

  export type PULPITUncheckedCreateWithoutTEACHER_TEACHER_PULPITToPULPITInput = {
    PULPIT: string
    PULPIT_NAME?: string | null
    FACULTY: string
    SUBJECT_SUBJECT_PULPITToPULPIT?: SUBJECTUncheckedCreateNestedManyWithoutPULPIT_SUBJECT_PULPITToPULPITInput
  }

  export type PULPITCreateOrConnectWithoutTEACHER_TEACHER_PULPITToPULPITInput = {
    where: PULPITWhereUniqueInput
    create: XOR<PULPITCreateWithoutTEACHER_TEACHER_PULPITToPULPITInput, PULPITUncheckedCreateWithoutTEACHER_TEACHER_PULPITToPULPITInput>
  }

  export type PULPITUpsertWithoutTEACHER_TEACHER_PULPITToPULPITInput = {
    update: XOR<PULPITUpdateWithoutTEACHER_TEACHER_PULPITToPULPITInput, PULPITUncheckedUpdateWithoutTEACHER_TEACHER_PULPITToPULPITInput>
    create: XOR<PULPITCreateWithoutTEACHER_TEACHER_PULPITToPULPITInput, PULPITUncheckedCreateWithoutTEACHER_TEACHER_PULPITToPULPITInput>
    where?: PULPITWhereInput
  }

  export type PULPITUpdateToOneWithWhereWithoutTEACHER_TEACHER_PULPITToPULPITInput = {
    where?: PULPITWhereInput
    data: XOR<PULPITUpdateWithoutTEACHER_TEACHER_PULPITToPULPITInput, PULPITUncheckedUpdateWithoutTEACHER_TEACHER_PULPITToPULPITInput>
  }

  export type PULPITUpdateWithoutTEACHER_TEACHER_PULPITToPULPITInput = {
    PULPIT?: StringFieldUpdateOperationsInput | string
    PULPIT_NAME?: NullableStringFieldUpdateOperationsInput | string | null
    FACULTY_PULPIT_FACULTYToFACULTY?: FACULTYUpdateOneRequiredWithoutPULPIT_PULPIT_FACULTYToFACULTYNestedInput
    SUBJECT_SUBJECT_PULPITToPULPIT?: SUBJECTUpdateManyWithoutPULPIT_SUBJECT_PULPITToPULPITNestedInput
  }

  export type PULPITUncheckedUpdateWithoutTEACHER_TEACHER_PULPITToPULPITInput = {
    PULPIT?: StringFieldUpdateOperationsInput | string
    PULPIT_NAME?: NullableStringFieldUpdateOperationsInput | string | null
    FACULTY?: StringFieldUpdateOperationsInput | string
    SUBJECT_SUBJECT_PULPITToPULPIT?: SUBJECTUncheckedUpdateManyWithoutPULPIT_SUBJECT_PULPITToPULPITNestedInput
  }

  export type AUDITORIUMCreateManyAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput = {
    AUDITORIUM: string
    AUDITORIUM_NAME?: string | null
    AUDITORIUM_CAPACITY?: number | null
  }

  export type AUDITORIUMUpdateWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput = {
    AUDITORIUM?: StringFieldUpdateOperationsInput | string
    AUDITORIUM_NAME?: NullableStringFieldUpdateOperationsInput | string | null
    AUDITORIUM_CAPACITY?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AUDITORIUMUncheckedUpdateWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput = {
    AUDITORIUM?: StringFieldUpdateOperationsInput | string
    AUDITORIUM_NAME?: NullableStringFieldUpdateOperationsInput | string | null
    AUDITORIUM_CAPACITY?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AUDITORIUMUncheckedUpdateManyWithoutAUDITORIUM_TYPE_AUDITORIUM_AUDITORIUM_TYPEToAUDITORIUM_TYPEInput = {
    AUDITORIUM?: StringFieldUpdateOperationsInput | string
    AUDITORIUM_NAME?: NullableStringFieldUpdateOperationsInput | string | null
    AUDITORIUM_CAPACITY?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PULPITCreateManyFACULTY_PULPIT_FACULTYToFACULTYInput = {
    PULPIT: string
    PULPIT_NAME?: string | null
  }

  export type PULPITUpdateWithoutFACULTY_PULPIT_FACULTYToFACULTYInput = {
    PULPIT?: StringFieldUpdateOperationsInput | string
    PULPIT_NAME?: NullableStringFieldUpdateOperationsInput | string | null
    SUBJECT_SUBJECT_PULPITToPULPIT?: SUBJECTUpdateManyWithoutPULPIT_SUBJECT_PULPITToPULPITNestedInput
    TEACHER_TEACHER_PULPITToPULPIT?: TEACHERUpdateManyWithoutPULPIT_TEACHER_PULPITToPULPITNestedInput
  }

  export type PULPITUncheckedUpdateWithoutFACULTY_PULPIT_FACULTYToFACULTYInput = {
    PULPIT?: StringFieldUpdateOperationsInput | string
    PULPIT_NAME?: NullableStringFieldUpdateOperationsInput | string | null
    SUBJECT_SUBJECT_PULPITToPULPIT?: SUBJECTUncheckedUpdateManyWithoutPULPIT_SUBJECT_PULPITToPULPITNestedInput
    TEACHER_TEACHER_PULPITToPULPIT?: TEACHERUncheckedUpdateManyWithoutPULPIT_TEACHER_PULPITToPULPITNestedInput
  }

  export type PULPITUncheckedUpdateManyWithoutFACULTY_PULPIT_FACULTYToFACULTYInput = {
    PULPIT?: StringFieldUpdateOperationsInput | string
    PULPIT_NAME?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SUBJECTCreateManyPULPIT_SUBJECT_PULPITToPULPITInput = {
    SUBJECT: string
    SUBJECT_NAME: string
  }

  export type TEACHERCreateManyPULPIT_TEACHER_PULPITToPULPITInput = {
    TEACHER: string
    TEACHER_NAME?: string | null
  }

  export type SUBJECTUpdateWithoutPULPIT_SUBJECT_PULPITToPULPITInput = {
    SUBJECT?: StringFieldUpdateOperationsInput | string
    SUBJECT_NAME?: StringFieldUpdateOperationsInput | string
  }

  export type SUBJECTUncheckedUpdateWithoutPULPIT_SUBJECT_PULPITToPULPITInput = {
    SUBJECT?: StringFieldUpdateOperationsInput | string
    SUBJECT_NAME?: StringFieldUpdateOperationsInput | string
  }

  export type SUBJECTUncheckedUpdateManyWithoutPULPIT_SUBJECT_PULPITToPULPITInput = {
    SUBJECT?: StringFieldUpdateOperationsInput | string
    SUBJECT_NAME?: StringFieldUpdateOperationsInput | string
  }

  export type TEACHERUpdateWithoutPULPIT_TEACHER_PULPITToPULPITInput = {
    TEACHER?: StringFieldUpdateOperationsInput | string
    TEACHER_NAME?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TEACHERUncheckedUpdateWithoutPULPIT_TEACHER_PULPITToPULPITInput = {
    TEACHER?: StringFieldUpdateOperationsInput | string
    TEACHER_NAME?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TEACHERUncheckedUpdateManyWithoutPULPIT_TEACHER_PULPITToPULPITInput = {
    TEACHER?: StringFieldUpdateOperationsInput | string
    TEACHER_NAME?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use AUDITORIUM_TYPECountOutputTypeDefaultArgs instead
     */
    export type AUDITORIUM_TYPECountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AUDITORIUM_TYPECountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FACULTYCountOutputTypeDefaultArgs instead
     */
    export type FACULTYCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FACULTYCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PULPITCountOutputTypeDefaultArgs instead
     */
    export type PULPITCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PULPITCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AUDITORIUMDefaultArgs instead
     */
    export type AUDITORIUMArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AUDITORIUMDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AUDITORIUM_TYPEDefaultArgs instead
     */
    export type AUDITORIUM_TYPEArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AUDITORIUM_TYPEDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FACULTYDefaultArgs instead
     */
    export type FACULTYArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FACULTYDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PULPITDefaultArgs instead
     */
    export type PULPITArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PULPITDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SUBJECTDefaultArgs instead
     */
    export type SUBJECTArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SUBJECTDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TEACHERDefaultArgs instead
     */
    export type TEACHERArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TEACHERDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}